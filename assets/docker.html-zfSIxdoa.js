import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,d as e,e as t,f as a,o as i}from"./app-CVsmu1tP.js";const s={},c=e("h3",{id:"前言",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#前言"},[e("span",null,"前言：")])],-1),o=e("p",null,"docker是什么？",-1),l=e("p",null,[t("docker是用GO语言开发的应用容器引擎，基于容器化，沙箱机制的应用部署技术。可适用于自动化测试、打包，持续集成和发布应用程序等场景。可以将其比喻为一种“应用程序的便携式包装方式”。就像你把东西放在一个标准化的集装箱里，然后这个集装箱可以被轻松地从一边运输到另一边而不需要担心内部物品会发生变化。同样地，Docker容器是一个“虚拟盒子”，你可以把应用程序和所有它所需的东西（比如代码、库、设置等）都放进去。这意味着无论是在开发机上还是云端服务器上，只要有Docker支持环境，你都能确保应用程序会以相同的方式运行。"),e("br"),t(" 换句话说, Docker 就像一个魔法盒子，在其中我们能够打包并且随处移动我们想要跑起来的软件，并且不必担心软件所依赖环境带来问题，因此docker有着"),e("strong",null,"快速部署"),t("的好处。")],-1),m=a(`<p>详细了解的话可以看这篇文章： <a href="https://zhuanlan.zhihu.com/p/26517832" target="_blank" rel="noopener noreferrer">知乎：容器化部署方案—docker</a></p><h3 id="随记" tabindex="-1"><a class="header-anchor" href="#随记"><span><strong>随记</strong></span></a></h3><p>主要是想记录常用命令以及介绍docker，<br> 往后会在此专栏记录一些用过且觉得好用的容器。</p><h3 id="docker常用命令" tabindex="-1"><a class="header-anchor" href="#docker常用命令"><span><em><strong>docker常用命令</strong></em></span></a></h3><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code><span class="token comment">#info|version</span>
docker info       #显示docker的系统信息，包括镜像和容器的数量
docker version    #显示docker的版本信息。

<span class="token comment">#帮助命令</span>
docker 命令 --help #帮助命令

<span class="token comment">#镜像命令</span>
docker images #查看所有本地主机上的镜像 可以使用docker image ls代替
docker search #搜索镜像
docker pull #下载镜像 docker image pull
docker rmi #删除镜像 docker image rm

<span class="token comment">#容器命令</span>
docker run 镜像id #新建容器并启动
docker ps 列出所有运行的容器 docker container list
docker rm 容器id #删除指定容器

	<span class="token comment">#删除所有容器</span>
	docker rm -f $(docker ps -aq)  	 #删除所有的容器
	docker ps -a -q|xargs docker rm  #删除所有的容器

<span class="token comment">#启动和停止容器</span>
docker start 容器id	#启动容器
docker restart 容器id	#重启容器
docker stop 容器id	#停止当前正在运行的容器
docker kill 容器id	#强制停止当前容器

<span class="token comment">#退出容器</span>
exit 		#容器直接退出
ctrl +P +Q  #容器不停止退出 	---注意：这个很有用的操作

<span class="token comment">#其他常用命令</span>
docker run -d 镜像名  #后台启动命令
docker logs 		#查看日志
docker top 容器id 	#查看容器中进程信息ps
docker inspect 容器id  #查看镜像的元数据
docker exec 		#进入当前容器后开启一个新的终端，可以在里面操作。（常用）
docker attach 		# 进入容器正在执行的终端
docker cp 容器id:容器内路径  主机目的路径	#从容器内拷贝到主机上
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="容器部署tag" tabindex="-1"><a class="header-anchor" href="#容器部署tag"><span>容器部署Tag</span></a></h3><p>栗子：</p><div class="language-linux line-numbers-mode" data-ext="linux" data-title="linux"><pre class="language-linux"><code>docker run -d  -p 1666:1666 -v /volume1/docker/perforce/data:/data -e P4USER:p4admin --name perforce ambakshi/perforce-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>tag</th><th>栗子</th><th>属性</th></tr></thead><tbody><tr><td>-p</td><td>-p 80 ：80</td><td>端口（本地：映射）</td></tr><tr><td>-e</td><td>-e P4USER:p4admin</td><td>环境变量</td></tr><tr><td>-name</td><td>-name perforce</td><td>容器名称 (perforce)</td></tr><tr><td>-restart</td><td>-restart=always</td><td>重启模式 (总是)</td></tr><tr><td>-v</td><td>-v ../perforce/data:/data</td><td>/映射路径:/容器空间</td></tr><tr><td></td><td>ambakshi/perforce-server:latest</td><td>镜像以及版本</td></tr><tr><td>-d</td><td>-d</td><td>detach 后台运行容器</td></tr><tr><td>-a</td><td>-a</td><td>attach 登录后台运行的容器</td></tr><tr><td>run</td><td>---</td><td>创建一个新容器并运行</td></tr><tr><td>-e TZ</td><td>TZ=Asia/Shanghai</td><td>e环境变量-时区</td></tr></tbody></table><h3 id="docker网络-netwrok" tabindex="-1"><a class="header-anchor" href="#docker网络-netwrok"><span>Docker网络 Netwrok</span></a></h3><p>Docker中的网络就像路由器构建的局域网<br> 加入到相同网络的容器<br> 可以使用容器名称相互访问</p><p>设置Docker网络的目的是 让网络内的容器可以相互访问，就像个局域网。<br> 不经过特殊设置网络外的容器是不能与网络内的容器进行相互访问的。</p><h3 id="puid-和-pgid" tabindex="-1"><a class="header-anchor" href="#puid-和-pgid"><span>PUID 和 PGID</span></a></h3><p>LinuxServer 维护的 Docker 镜像都有 PUID 和 PGID 这两个环境变量，他们主要用来设置挂载到容器中的存储的所有权。</p><p>默认情况Docker容器是使用root身份读写和存储的，主机上其他的用户是没有权限进行操作的。 如果想要以nas上普通用户的身份去读写和存储共享文件夹，那么就在环境变量中添加 PUID(主机用户ID)和PGID(主机用户组ID),这样容器就可以对指定的用户id或者用户组id开放读写存储操作。</p><blockquote><p>要注意容器是否支持PUID PGID的这项功能。</p></blockquote><h4 id="如何查看用户的id呢" tabindex="-1"><a class="header-anchor" href="#如何查看用户的id呢"><span>如何查看用户的ID呢？</span></a></h4><p>通过SHH登陆nas<br> 然后输入 <code>id</code> 或者 <code>id user</code> id+日常使用的用户名称</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>  $ id username
    uid=1000(dockeruser) gid=1000(dockergroup) groups=1000(dockergroup)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="image-preview"><img src="https://megestus-1309556466.cos.ap-shanghai.myqcloud.com/img/20240224171102.png" style="width:95% !important;"></div><h3 id="群晖查看占用端口" tabindex="-1"><a class="header-anchor" href="#群晖查看占用端口"><span>群晖查看占用端口</span></a></h3><p>群晖套件重装过程中提示端口被占用的解决方案</p><ul><li>打开群晖控制面板--安全性</li><li>点击启用防火墙，然后点击应用按钮。</li><li>然后点击编辑规则</li></ul><div class="image-preview"><img src="https://megestus-1309556466.cos.ap-shanghai.myqcloud.com/img/20240224152305.png" style="width:80% !important;"></div><h3 id="设置-docker-容器日志大小-全局设置" tabindex="-1"><a class="header-anchor" href="#设置-docker-容器日志大小-全局设置"><span>设置 Docker 容器日志大小（全局设置）</span></a></h3><p>限制 Docker 容器的日志大小，可以进行全局设置。首先，创建或编辑 /etc/docker/daemon.json 文件。如果已经存在这个文件，可以直接编辑它。确保文件内容如下所示：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>{
	&quot;log-driver&quot;: &quot;json-file&quot;,
	&quot;log-opts&quot;: { &quot;max-size&quot;: &quot;500m&quot;, &quot;max-file&quot;: &quot;3&quot; }
	}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述配置中，max-size 设置了单个容器日志文件的最大大小为 500MB，而 max-file 设置了最多保留 3 个旧的日志文件。这意味着当日志文件大小达到 500MB 时，Docker 会自动切割日志文件并最多保留 3 个旧的日志文件。</p>`,28);function p(u,v){return i(),r("div",null,[c,o,l,n(" more "),m])}const g=d(s,[["render",p],["__file","docker.html.vue"]]),b=JSON.parse('{"path":"/server/docker/docker.html","title":"Docker","lang":"zh-CN","frontmatter":{"title":"Docker","description":"前言： docker是什么？ docker是用GO语言开发的应用容器引擎，基于容器化，沙箱机制的应用部署技术。可适用于自动化测试、打包，持续集成和发布应用程序等场景。可以将其比喻为一种“应用程序的便携式包装方式”。就像你把东西放在一个标准化的集装箱里，然后这个集装箱可以被轻松地从一边运输到另一边而不需要担心内部物品会发生变化。同样地，Docker容器是...","icon":"fa-brands fa-docker","category":"docker","tags":"docker","date":"2024-01-18T00:00:00.000Z","cover":"https://megestus-1309556466.cos.ap-shanghai.myqcloud.com/img/docker2.png","head":[["meta",{"property":"og:url","content":"https:///about.md/blog/server/docker/docker.html"}],["meta",{"property":"og:site_name","content":"Megestus"}],["meta",{"property":"og:title","content":"Docker"}],["meta",{"property":"og:description","content":"前言： docker是什么？ docker是用GO语言开发的应用容器引擎，基于容器化，沙箱机制的应用部署技术。可适用于自动化测试、打包，持续集成和发布应用程序等场景。可以将其比喻为一种“应用程序的便携式包装方式”。就像你把东西放在一个标准化的集装箱里，然后这个集装箱可以被轻松地从一边运输到另一边而不需要担心内部物品会发生变化。同样地，Docker容器是..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://megestus-1309556466.cos.ap-shanghai.myqcloud.com/img/docker2.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-07T17:21:45.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://megestus-1309556466.cos.ap-shanghai.myqcloud.com/img/docker2.png"}],["meta",{"name":"twitter:image:alt","content":"Docker"}],["meta",{"property":"article:author","content":"Megestus"}],["meta",{"property":"article:published_time","content":"2024-01-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-07T17:21:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker\\",\\"image\\":[\\"https://megestus-1309556466.cos.ap-shanghai.myqcloud.com/img/docker2.png\\"],\\"datePublished\\":\\"2024-01-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-07T17:21:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Megestus\\",\\"url\\":\\"https://github.com/Megestus\\"}]}"]]},"headers":[{"level":3,"title":"前言：","slug":"前言","link":"#前言","children":[]},{"level":3,"title":"随记","slug":"随记","link":"#随记","children":[]},{"level":3,"title":"docker常用命令","slug":"docker常用命令","link":"#docker常用命令","children":[]},{"level":3,"title":"容器部署Tag","slug":"容器部署tag","link":"#容器部署tag","children":[]},{"level":3,"title":"Docker网络 Netwrok","slug":"docker网络-netwrok","link":"#docker网络-netwrok","children":[]},{"level":3,"title":"PUID 和 PGID","slug":"puid-和-pgid","link":"#puid-和-pgid","children":[]},{"level":3,"title":"群晖查看占用端口","slug":"群晖查看占用端口","link":"#群晖查看占用端口","children":[]},{"level":3,"title":"设置 Docker 容器日志大小（全局设置）","slug":"设置-docker-容器日志大小-全局设置","link":"#设置-docker-容器日志大小-全局设置","children":[]}],"git":{"createdTime":1711204216000,"updatedTime":1723051305000,"contributors":[{"name":"Megestus","email":"2624203622@qq.com","commits":4}]},"filePathRelative":"server/docker/docker.md","localizedDate":"2024年1月18日","excerpt":"<h3>前言：</h3>\\n<p>docker是什么？</p>\\n<p>docker是用GO语言开发的应用容器引擎，基于容器化，沙箱机制的应用部署技术。可适用于自动化测试、打包，持续集成和发布应用程序等场景。可以将其比喻为一种“应用程序的便携式包装方式”。就像你把东西放在一个标准化的集装箱里，然后这个集装箱可以被轻松地从一边运输到另一边而不需要担心内部物品会发生变化。同样地，Docker容器是一个“虚拟盒子”，你可以把应用程序和所有它所需的东西（比如代码、库、设置等）都放进去。这意味着无论是在开发机上还是云端服务器上，只要有Docker支持环境，你都能确保应用程序会以相同的方式运行。<br>\\n换句话说, Docker 就像一个魔法盒子，在其中我们能够打包并且随处移动我们想要跑起来的软件，并且不必担心软件所依赖环境带来问题，因此docker有着<strong>快速部署</strong>的好处。</p>\\n","autoDesc":true}');export{g as comp,b as data};
