import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,o as u,c as h,b as p,d as e,e as t,a as d,w as l,f as o}from"./app-BFw3I-8F.js";const m={},v=e("p",null,[t("回顾复习"),e("br"),t(" 摘要：面板、参数、IVO、函数、cginc")],-1),g=o(`<h2 id="面板" tabindex="-1"><a class="header-anchor" href="#面板"><span>面板</span></a></h2><h3 id="面板参数声明格式" tabindex="-1"><a class="header-anchor" href="#面板参数声明格式"><span>面板参数声明格式</span></a></h3><ul><li>数值，范围： <ul><li>_Name (“标签名”, float) = defaultVal</li><li>_Name (“标签名”, range(min, max)) = defaultVal</li><li>_Name (“标签名”, int) = defaultVal</li></ul></li><li>位置，向量，颜色： <ul><li>_Name (“标签名”, vector) = (xVal, yVal, zVal, wVal)</li><li>_Name (“标签名”, color) = (rVal, gVal, bVal, aVal)</li></ul></li><li>2D，3D纹理，环境球： <ul><li>_Name (“标签名”, 2d) = “defaultTex” {}</li><li>_Name (“标签名”, 3d) = “defaultTex” {}</li><li>_Name (“标签名”, cube) = “defaultTex” {}</li></ul></li></ul><h3 id="参数属性" tabindex="-1"><a class="header-anchor" href="#参数属性"><span>参数属性</span></a></h3><ul><li><p>[HideInInspector]</p><ul><li>用途：在面板上隐藏该参数；</li><li>可用于：任何参数；</li><li>例：<code>[HideInInspector] _FakeLightDir (“伪光方向”, vector) = (0.0, 1.0, 0.0, 1.0)</code></li></ul></li><li><p>[NoScaleOffset]</p><ul><li>用途：禁用纹理的TilingOffset面板；不需要做TilingOffset的纹理，比如大部分的角色纹理，防止美术误设置；</li><li>可用于：纹理参数；</li><li>例：<code>[NoScaleOffset] _MainTex (“主贴图”, 2d) = “white” {}</code></li></ul></li><li><p>[Normal]</p><ul><li>用途：标示该纹理参数为法线贴图，以激活相关自检功能；</li><li>可用于：2D纹理参数；</li><li>例：<code>[Normal] _NormTex (“法线贴图”, 2d) = “bump”{}</code></li></ul></li><li><p>[HDR]</p><ul><li>用途：用于设置高动态范围颜色值；如：灯光颜色，自发光颜色等；</li><li>可用于：颜色参数；</li><li>例：<code>[HDR] _EmitCol (“自发光颜色”, color) = (1.0, 1.0, 1.0, 1.0)</code></li></ul></li><li><p>[Gamma]</p><ul><li>用途：用于颜色参数的色彩空间的转换；一般用于色彩空间为Linear的项目；</li><li>可用于：颜色参数；</li><li>例：<code>[Gamma] _EmitCol (“自发光颜色”, color) = (1.0, 1.0, 1.0, 1.0)</code></li></ul></li><li><p>[PowerSlider(value)]</p><ul><li>用途：对范围参数做Power处理后再传入Shader；纠正部分参数调节手感；</li><li>可用于：范围参数；</li><li>例：<code>[PowerSlider(2)] _SpecPow (“高光次幂”, range(1, 90)) = 30</code></li></ul></li><li><p>[Header(Label)]</p><ul><li>用途：标签，用于排版；</li><li>可用于：单独使用；</li><li>例：<code>[Header(Texture)]</code></li></ul></li><li><p>[Space(value)]</p><ul><li>用途：空行，用于排版；</li><li>可用于：单独使用；</li><li>例：<code>[Space(50)]</code> 其他：<code>[Toggle]</code> <code>[Enum]</code> <code>[Keyword]</code>配合宏使用，暂时不用知道；自定义Drawer需要一定C#能力，暂时不用知道；</li></ul></li></ul><h2 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h2><h3 id="shaderlab中的参数类型" tabindex="-1"><a class="header-anchor" href="#shaderlab中的参数类型"><span>ShaderLab中的参数类型</span></a></h3><ul><li>fixed： 11位定点数，-2.0~2.0，精度1/256；</li><li>half： 16位浮点数，-60000~60000，精度约3位小数；</li><li>float： 32位浮点数，-3.4E38~3.4E38，精度约6，7位小数；</li><li>Int： 32位整形数，较少使用；</li><li>bool： 布尔型数，较少使用；</li><li>矩阵： <ul><li>float2x2, float3x3, float4x4, float2x3 诸如此类格式；</li><li>half2x2, half3x3, half4x4, half2x3 诸如此类格式；</li></ul></li><li>纹理对象： <ul><li>sampler2D： 2D纹理</li><li>sampler3D： 3D纹理</li><li>samplerCUBE： Cube纹理</li></ul></li></ul><h3 id="参数的精度选择" tabindex="-1"><a class="header-anchor" href="#参数的精度选择"><span>参数的精度选择</span></a></h3><ul><li>原则上优先使用精度最低的数据类型；</li><li>经验： <ul><li>世界空间位置和UV坐标，使用float；</li><li>向量，HDR颜色，使用half；视情况升到float；</li><li>LDR颜色，简单乘子，可使用fixed；</li></ul></li><li>但是： <ul><li>不同平台对数据类型的支持情况不同；一般会自动转换，极少数情况自动转换会带来问题；</li><li>部分平台上，数据类型精度转换消耗也不小；所以fixed也是慎用；</li><li>多和你们的图形开发商量；</li></ul></li></ul><h2 id="ivo-input-vector-output" tabindex="-1"><a class="header-anchor" href="#ivo-input-vector-output"><span>IVO - input vector output</span></a></h2><h3 id="可访问的顶点lnput数据" tabindex="-1"><a class="header-anchor" href="#可访问的顶点lnput数据"><span>可访问的顶点lnput数据</span></a></h3><table><thead><tr><th>---------</th><th>--------</th><th>数据类型</th></tr></thead><tbody><tr><td>POSITION</td><td>顶点位置</td><td>float3 float4</td></tr><tr><td>TEXCOORD0</td><td>UV通道1</td><td>float2 float3 float4</td></tr><tr><td>TEXCOORD1</td><td>UV通道2</td><td>float2 float3 float4</td></tr><tr><td>TEXCOORD2</td><td>UV通道3</td><td>float2 float3 float4</td></tr><tr><td>TEXCOORD3</td><td>UV通道4</td><td>float2 float3 float4</td></tr><tr><td>NORMAL</td><td>法线方向</td><td>float3</td></tr><tr><td>TANGENT</td><td>切线方向</td><td>float4</td></tr><tr><td>COLOR</td><td>顶点色</td><td>float4</td></tr></tbody></table><h3 id="常用的顶点output数据" tabindex="-1"><a class="header-anchor" href="#常用的顶点output数据"><span>常用的顶点Output数据</span></a></h3><table><thead><tr><th>---------</th><th>--------</th><th>数据类型</th></tr></thead><tbody><tr><td>pos</td><td>顶点位置CS</td><td>float4</td></tr><tr><td>uv0</td><td>一般纹理UV</td><td>float2</td></tr><tr><td>uv1</td><td>LighmapUV</td><td>float2</td></tr><tr><td>posWS</td><td>顶点位置WS</td><td>float3</td></tr><tr><td>nDirWS</td><td>法线方向WS</td><td>half3</td></tr><tr><td>tDirWS</td><td>切线方向WS</td><td>half3</td></tr><tr><td>bDirWS</td><td>副切线方向WS</td><td>half3</td></tr><tr><td>color</td><td>顶点色</td><td>fixed4</td></tr></tbody></table><h3 id="常用顶点shader操作" tabindex="-1"><a class="header-anchor" href="#常用顶点shader操作"><span>常用顶点Shader操作</span></a></h3><blockquote><p>注：Unity2019.3.2f1版本</p></blockquote><table><thead><tr><th>------</th><th>操作</th><th>操作2</th></tr></thead><tbody><tr><td>pos</td><td>o.pos = UnityObjectToClipPos(v.vertex);</td><td></td></tr><tr><td>uv0</td><td>o.uv0 = v.uv0 ;</td><td>o.uv0 = TRANSFORM_TEX(v.uv0, _MainTex);</td></tr><tr><td>uv1</td><td>o.uv1 = v.uv1 ;</td><td>o.uv1 = v.uv1 * unity_LightmapST.xy + unity_LightmapST.zw;</td></tr><tr><td>posWS</td><td>o.posWS = mul(unity_ObjectToWorld, v.vertex);</td><td></td></tr><tr><td>nDirWS</td><td>o.nDirWS = UnityObjectToWorldNormal(v.normal);</td><td></td></tr><tr><td>tDirWS</td><td>o.tDirWS = normalize(mul(unity_ObjectToWorld, float4(v.tangent.xyz, 0.0)).xyz);</td><td></td></tr><tr><td>bDirWS</td><td>o.bDirWS = normalize(cross(o.nDirWS, o.tDirWS) * v.tangent.w);</td><td></td></tr><tr><td>color</td><td>o.color = v.color;</td><td></td></tr></tbody></table><h2 id="方法-函数" tabindex="-1"><a class="header-anchor" href="#方法-函数"><span>方法 &amp; 函数</span></a></h2><p>使用过UE的同学可以理解为<code>材质函数</code></p><p>优点：</p><ul><li>功能模块化；</li><li>代码复用；</li><li>积累自己的 方法/函数库 ；</li><li>方法需要写在<code>输出结构&gt;像素</code>前头</li></ul><h3 id="_3colambient函数" tabindex="-1"><a class="header-anchor" href="#_3colambient函数"><span>3ColAmbient函数</span></a></h3><p>原写法</p><div class="language-.shader line-numbers-mode" data-ext=".shader" data-title=".shader"><pre class="language-.shader"><code>float upMask = max(0.0, nDirWS.g); // 获取朝上部分遮罩
float downMask = max(0.0, -nDirWS.g); // 获取朝下部分遮罩
float sideMask = 1.0 - upMask - downMask; // 获取侧面部分遮罩

float3 envCol = _EnvUpCol * upMask +
_EnvSideCol * sideMask +
_EnvDownCol * downMask; // 混合环境色

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>归纳为函数后的写法：</p><div class="language-.shader line-numbers-mode" data-ext=".shader" data-title=".shader"><pre class="language-.shader"><code>// 3Col环境色函数
float3 TriColAmbient (float3 n, float3 uCol, float3 sCol, float3 dCol) {
float uMask = max(0.0, n.g); // 获取朝上部分遮罩
float dMask = max(0.0, -n.g); // 获取朝下部分遮罩
float sMask = 1.0 - uMask - dMask; // 获取侧面部分遮罩
float3 envCol = uCol * uMask +
sCol * sMask +
dCol * dMask; // 混合环境色
return envCol;
}

// 使用3Col环境色函数
float3 envCol = TriColAmbient(nDirWS, _EnvUpCol, _EnvSideCol, _EnvDownCol);

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>理解一下这个结构</p><ul><li>TriColAmbient ()内是输入定义的float和输入的内容 ; {}中括号内的就是内部的运算 。<br> 值得注意的是要把输入的内容进行替换</li><li>使用的话 就类似下方注释 使用3Col环境色方法 直接按顺序输入对应的内容</li></ul><div class="image-preview"><img src="https://sky.megestu.top/i/1/20240330175722.png" style="width:30% !important;"> 直观些，就像是这样 </div><p> </p><h2 id="自定义-shader-cginc-函数工具库" tabindex="-1"><a class="header-anchor" href="#自定义-shader-cginc-函数工具库"><span>自定义 shader cginc 函数工具库</span></a></h2>`,32),b={href:"https://docs.unity.cn/cn/2020.3/Manual/SL-BuiltinIncludes.html",target:"_blank",rel:"noopener noreferrer"},f=o('<p>优点：</p><ul><li>可以跨shader使用，把 <code>方法/函数</code> 放到一个 <code>.cginc</code> 内调用自己定义好的函数；</li><li>分类；</li></ul><p>库的结构：</p><div class="image-preview"><img src="https://sky.megestu.top/i/1/20240330145749.png" style="width:95% !important;"></div><p> </p><h3 id="定义函数工具库文件" tabindex="-1"><a class="header-anchor" href="#定义函数工具库文件"><span>定义函数工具库文件</span></a></h3><p>unity不支持在编辑期内创建 <code>.cginc</code> 文件，创建需要在系统文件夹内创建.<br> 在项目assets所在的文件夹，然后定义一个目录创建一个文本文件并起名为：<code>MyCginc.cginc</code>。</p><blockquote><p>要注意如果是windows系统有可能文件会自动隐藏扩展名导致命名错误，需要你先设置所&quot;有文件扩展名可见&quot;，然后再把txt扩展名改为cginc。</p></blockquote>',8),_=e("div",{class:"language-cginc line-numbers-mode","data-ext":"cginc","data-title":"cginc"},[e("pre",{class:"language-cginc"},[e("code",null,`#ifndef MY_CGINC
#define MY_CGINC

// 3Col环境色函数 
float3 TriColAmbient (float3 n, float3 uCol, float3 sCol, float3 dCol) {
float uMask = max(0.0, n.g); // 获取朝上部分遮罩
float dMask = max(0.0, -n.g); // 获取朝下部分遮罩
float sMask = 1.0 - uMask - dMask; // 获取侧面部分遮罩
float3 envCol = uCol * uMask +
sCol * sMask +
dCol * dMask; // 混合环境色
return envCol;
}

#endif
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),x=e("h3",{id:"库引用",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#库引用"},[e("span",null,"库引用")])],-1),C=e("div",{class:"language-.shader line-numbers-mode","data-ext":".shader","data-title":".shader"},[e("pre",{class:"language-.shader"},[e("code",null,`  CGPROGRAM
  //载入自定义库
  #include "./Assets/Cginc/MyCginc.cginc"
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),k=e("div",{class:"language-.shader line-numbers-mode","data-ext":".shader","data-title":".shader"},[e("pre",{class:"language-.shader"},[e("code",null,`//在光照模型中使用函数库中的3Col环境色公共函数
float3 envCol = TriColAmbient(nDirWS, _EnvUpCol, _EnvSideCol, _EnvDownCol);

`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),y=e("p",null," ",-1),S=e("h2",{id:"大作业",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#大作业"},[e("span",null,"大作业")])],-1),M=e("div",{class:"image-preview"},[e("img",{src:"https://sky.megestu.top/i/1/20240330150406.png",style:{width:"95% !important"}})],-1),T={href:"https://support.steampowered.com/kb/3081-QUXN-6209/dota-2-workshop-item-shader-masks",target:"_blank",rel:"noopener noreferrer"};function N(D,V){const s=r("ExternalLinkIcon"),n=r("CodeTabs");return u(),h("div",null,[v,p(" more "),g,e("p",null,[e("a",b,[t("Unity文档 - 内置着色器 include 文件"),d(s)])]),f,d(n,{id:"812",data:[{id:"MyCginc.cginc"}],"tab-id":"shell"},{title0:l(({value:a,isActive:i})=>[t("MyCginc.cginc")]),tab0:l(({value:a,isActive:i})=>[_]),_:1},8,["data"]),x,d(n,{id:"820",data:[{id:"xxx.shader"}],"tab-id":"shell"},{title0:l(({value:a,isActive:i})=>[t("xxx.shader")]),tab0:l(({value:a,isActive:i})=>[C]),_:1},8,["data"]),d(n,{id:"825",data:[{id:"使用 xxx.shader"}],"tab-id":"shell"},{title0:l(({value:a,isActive:i})=>[t("使用 xxx.shader")]),tab0:l(({value:a,isActive:i})=>[k]),_:1},8,["data"]),y,S,M,e("p",null,[e("a",T,[t("https://support.steampowered.com/kb/3081-QUXN-6209/dota-2-workshop-item-shader-masks"),d(s)])])])}const E=c(m,[["render",N],["__file","shader11.html.vue"]]),W=JSON.parse('{"path":"/engine/unity/shader/shader11.html","title":"unity-shader-11","lang":"zh-CN","frontmatter":{"title":"unity-shader-11","description":"回顾复习 摘要：面板、参数、IVO、函数、cginc 面板 面板参数声明格式 数值，范围： _Name (“标签名”, float) = defaultVal _Name (“标签名”, range(min, max)) = defaultVal _Name (“标签名”, int) = defaultVal 位置，向量，颜色： _Name (“标签名...","icon":"iconfont alicon-zan","category":"shader","tag":["shader","unity"],"date":"2024-03-30T00:00:00.000Z","cover":"https://sky.megestu.top/i/1/20240330204620.png","head":[["meta",{"property":"og:url","content":"https://megestus.top/blog/engine/unity/shader/shader11.html"}],["meta",{"property":"og:site_name","content":"Megestus"}],["meta",{"property":"og:title","content":"unity-shader-11"}],["meta",{"property":"og:description","content":"回顾复习 摘要：面板、参数、IVO、函数、cginc 面板 面板参数声明格式 数值，范围： _Name (“标签名”, float) = defaultVal _Name (“标签名”, range(min, max)) = defaultVal _Name (“标签名”, int) = defaultVal 位置，向量，颜色： _Name (“标签名..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://sky.megestu.top/i/1/20240330204620.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-30T15:16:31.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://sky.megestu.top/i/1/20240330204620.png"}],["meta",{"name":"twitter:image:alt","content":"unity-shader-11"}],["meta",{"property":"article:author","content":"Megestus"}],["meta",{"property":"article:tag","content":"shader"}],["meta",{"property":"article:tag","content":"unity"}],["meta",{"property":"article:published_time","content":"2024-03-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-30T15:16:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"unity-shader-11\\",\\"image\\":[\\"https://sky.megestu.top/i/1/20240330204620.png\\"],\\"datePublished\\":\\"2024-03-30T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-30T15:16:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Megestus\\",\\"url\\":\\"https://github.com/Megestus\\"}]}"]]},"headers":[{"level":2,"title":"面板","slug":"面板","link":"#面板","children":[{"level":3,"title":"面板参数声明格式","slug":"面板参数声明格式","link":"#面板参数声明格式","children":[]},{"level":3,"title":"参数属性","slug":"参数属性","link":"#参数属性","children":[]}]},{"level":2,"title":"参数","slug":"参数","link":"#参数","children":[{"level":3,"title":"ShaderLab中的参数类型","slug":"shaderlab中的参数类型","link":"#shaderlab中的参数类型","children":[]},{"level":3,"title":"参数的精度选择","slug":"参数的精度选择","link":"#参数的精度选择","children":[]}]},{"level":2,"title":"IVO - input  vector  output","slug":"ivo-input-vector-output","link":"#ivo-input-vector-output","children":[{"level":3,"title":"可访问的顶点lnput数据","slug":"可访问的顶点lnput数据","link":"#可访问的顶点lnput数据","children":[]},{"level":3,"title":"常用的顶点Output数据","slug":"常用的顶点output数据","link":"#常用的顶点output数据","children":[]},{"level":3,"title":"常用顶点Shader操作","slug":"常用顶点shader操作","link":"#常用顶点shader操作","children":[]}]},{"level":2,"title":"方法 & 函数","slug":"方法-函数","link":"#方法-函数","children":[{"level":3,"title":"3ColAmbient函数","slug":"_3colambient函数","link":"#_3colambient函数","children":[]}]},{"level":2,"title":"自定义 shader cginc 函数工具库","slug":"自定义-shader-cginc-函数工具库","link":"#自定义-shader-cginc-函数工具库","children":[{"level":3,"title":"定义函数工具库文件","slug":"定义函数工具库文件","link":"#定义函数工具库文件","children":[]},{"level":3,"title":"库引用","slug":"库引用","link":"#库引用","children":[]}]},{"level":2,"title":"大作业","slug":"大作业","link":"#大作业","children":[]}],"git":{"createdTime":1711811791000,"updatedTime":1711811791000,"contributors":[{"name":"Megestus","email":"2624203622@qq.com","commits":1}]},"filePathRelative":"engine/unity/shader/shader11.md","localizedDate":"2024年3月30日","excerpt":"<p>回顾复习<br>\\n摘要：面板、参数、IVO、函数、cginc</p>\\n","autoDesc":true}');export{E as comp,W as data};
