import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as d,d as e,e as i,a as t,w as r,f as s,r as n,o as u}from"./app-Byynwqi4.js";const p={},m=e("p",null,"在这段时间里，使用 GitHub Actions 实现了静态博客的自动化部署。只需将更改推送到 GitHub 仓库，GitHub Actions 就会根据预先设定的配置文件自动执行相关部署操作。属实是非常强大，但还是有些不是很明白其中自动化的过程，接下来将学习记录一下这方面的内容。",-1),v=s('<p> </p><hr><p>然后现在去了解它的一个运作过程。</p><p>上述提到使用 actions 实现自动化静态博客部署，<br> 其中静态博客，就是通过生成工具（eg：VuePress、Hugo、hexo 等），直接将作者所书写的博文编译成最终的 html、css、js 等静态文件。 然后只需将生成的文件部署在服务器（eg：GitHub、Gitee、自建服务器）上面即可被在互联网中访问。</p><ul><li><p>一般这类静态博客部署的流程是：</p><ul><li>写一篇 markdown 文章。</li><li>执行命令生成静态文件，比如 npm run build。</li><li>将静态文件推送到博客仓库</li><li>访问网址验证是否成功</li><li>为了备份你的博客，你可能要将你写博客的项目也推送到仓库。</li></ul></li><li><p>使用了 GitHub Actions 之后，流程可以简化为：</p><ul><li>写一篇 markdown 文章。</li><li>提交到 GitHub。（这一步相当于上面的第 5 步，不需要上传 node_modules 文件夹)</li><li>结束了</li></ul></li></ul><p>不止博客的部署，任意软件的持续集成，都可以由 GitHub Actions 来完成，比如拉取代码、运行测试、登录远程服务器，发布到第三方服务等。因此 GitHub Actions 是实现自动化发布最便捷的方式了，值得学习和使用。</p><h2 id="定一个小目标" tabindex="-1"><a class="header-anchor" href="#定一个小目标"><span>定一个小目标</span></a></h2><p>然后接下来就来使用一下 actions ，定一个小目标</p><ul><li>使用git创建一个 私有<code>仓库1</code> -用于项目仓库，里面有用于生成博客的 md 文件，和生成静态博客的脚手架，比如 VuePress，hexo 等</li><li>再创建一个 开源<code>仓库2</code> -用于存放博客的静态资源文件，用于展示博客。</li></ul><p>目标就是-写要一篇文章-推送到<code>仓库1</code>，<code>仓库2</code>就自动更新静态资源文件。</p><h2 id="理解-github-actions" tabindex="-1"><a class="header-anchor" href="#理解-github-actions"><span>理解 GitHub Actions</span></a></h2><p>我对 GitHub Actions 的理解，GitHub Actions 是一个自动化工具，能够帮助我们自动化开发中的各种任务，比如代码的构建、测试和部署。它是基于事件触发的，意味着你可以设定特定的条件来启动这些自动化任务。<br> 例如：你提交到<code>仓库1</code>后，GitHub会监控到push的变动，然后按照你指定的step顺序执行定义好的action，这些action就包括build生成静态文件，push到你指定的<code>仓库2</code>等动作。</p><p><strong>关键组件</strong>：</p><h3 id="_1-触发事件-triggers" tabindex="-1"><a class="header-anchor" href="#_1-触发事件-triggers"><span>1. <strong>触发事件（Triggers）</strong>：</span></a></h3><ul><li><p>事件是触发 GitHub Actions 工作流的行为，如代码推送或拉取请求。通过在 <code>.github/workflows</code> 的 YAML 文件中定义，我们可以精准控制何时启动自动化流程。</p><ul><li>GitHub Actions 通过定义在 <code>.github/workflows</code> 目录中的工作流文件（通常是 YAML 格式）来配置。</li><li>工作流可以被多种事件触发，比如代码推送（push）、拉取请求（pull request）、定时事件（cron）、或是 GitHub 上的其他事件。</li></ul></li></ul><h3 id="_2-工作流-workflows" tabindex="-1"><a class="header-anchor" href="#_2-工作流-workflows"><span>2. <strong>工作流（Workflows）</strong>：</span></a></h3><ul><li><p>工作流是自动化过程的蓝图，它定义了在哪些事件下，哪些任务应当执行。工作流可以非常灵活，支持在多种环境下运行，满足不同的自动化需求。</p><ul><li>工作流是一个或多个作业的集合，它描述了哪些任务（steps）在什么条件下运行。</li><li>工作流文件中，你可以定义环境变量、运行环境（比如 Ubuntu、Windows）、需要的服务（如数据库）等。</li></ul></li></ul><h3 id="_3-任务-jobs" tabindex="-1"><a class="header-anchor" href="#_3-任务-jobs"><span>3. <strong>任务（Jobs）</strong>：</span></a></h3><ul><li><p>任务是工作流中的独立单元，可以包含多个任务。它们可以配置为并行或串行执行，每个任务都运行在自己的虚拟环境中，保证了任务之间的独立性。</p><ul><li>每个工作流包含一个或多个任务，任务可以并行或顺序执行。</li><li>每个任务都会在自己的虚拟环境或容器中运行，独立于其他任务。</li></ul></li></ul><h3 id="_4-步骤-steps" tabindex="-1"><a class="header-anchor" href="#_4-步骤-steps"><span>4. <strong>步骤（Steps）</strong>：</span></a></h3><ul><li><p>步骤是作业中的基本执行单元，可以是一行命令、一个脚本，或是复用的 Actions。Actions 是社区共享的代码片段，可以帮助我们完成特定的任务，如代码部署、环境设置等。</p><ul><li>每个作业由一系列步骤组成，步骤可以执行命令、运行脚本或使用 Actions。</li><li>Actions 是 GitHub Actions 的核心，可以是自定义的或是社区分享的重用代码片段，用于完成特定的任务，比如检出代码、设置 Node.js 环境、部署到云平台等。</li></ul></li></ul><h3 id="_5-结果和反馈" tabindex="-1"><a class="header-anchor" href="#_5-结果和反馈"><span>5. <strong>结果和反馈</strong>：</span></a></h3><ul><li>工作流运行完毕后，GitHub 会提供执行结果，帮助我们快速定位成功或失败的原因。通过日志分析，我们可以有效地调试和优化工作流。</li></ul><p> </p><h2 id="实战演习" tabindex="-1"><a class="header-anchor" href="#实战演习"><span>实战演习</span></a></h2><h3 id="_1-创建好仓库" tabindex="-1"><a class="header-anchor" href="#_1-创建好仓库"><span>1.创建好仓库</span></a></h3><ul><li><code>仓库2</code> 开源</li><li><code>仓库1</code> 私有</li></ul><div class="image-preview"><img src="https://megestus-1309556466.cos.ap-shanghai.myqcloud.com/img/20240323122644.png" style="width:95% !important;"></div><p>这里就使用vuepress为例子，使用<a href="https://theme-hope.vuejs.press/zh/get-started/create.html" target="_blank" rel="noopener noreferrer">hope主题</a>。</p><div class="image-preview"><img src="https://megestus-1309556466.cos.ap-shanghai.myqcloud.com/img/20240323182438.png" style="width:95% !important;"></div><blockquote><p>我们不需要git仓库初始化</p></blockquote><p>然后把 <code>仓库1</code>先克隆到本地-然后把vuepress的根目录文件全部拷贝到 <code>仓库1</code>本地克隆的位置</p>',32),g=s(`<p>随后我们看到<code> .github/workflows/deploy-docs.yml</code>文件 这就是 GitHub Actions 功能的配置文件。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>name: 部署文档

on:
  push:
    branches:
      # 确保这是你正在使用的分支名称
      - main

permissions:
  contents: write

jobs:
  deploy-gh-pages:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          # 如果你文档需要 Git 子模块，取消注释下一行
          # submodules: true

      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          run_install: true
          version: 8


      - name: 设置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: pnpm


      - name: 构建文档
        env:
          NODE_OPTIONS: --max_old_space_size=8192
        run: |-
          pnpm run docs:build
          touch src/.vuepress/dist/.nojekyll

      - name: 部署文档
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          # 这是文档部署到的分支名称
          branch: gh-pages
          folder: src/.vuepress/dist
          # 推送到别的仓库
          token: \${{ secrets.ACCESS_TOKEN }}
          repository-name: Megestus/Detop2

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p> </p><h3 id="yaml-格式" tabindex="-1"><a class="header-anchor" href="#yaml-格式"><span>YAML 格式</span></a></h3><p>GitHub Actions 工作流需要的全部内容，遵循 YAML 格式，这里我做一个大致的说明：</p><ul><li><p><span style="color:red;"><strong><code>on</code></strong></span> 表示触发条件</p></li><li><p><span style="color:red;"><strong><code>jobs</code></strong></span> 表示要做的工作</p><ul><li><p><span style="color:red;"><strong><code>jobs</code></strong></span> 下的 <span style="color:#27ae60;"><strong><code>step</code></strong></span>表示要做的步骤，前一步失败，后面不会继续执行。</p><ul><li><span style="color:#27ae60;"><strong><code>step</code></strong></span> 下有 <code>name</code>、<code>uses</code>、<code>with</code> 等，表示一个 action。 <ul><li><p><code>name</code> 表示 action 的名称，<code>uses</code> 表示使用哪个插件，<code>with</code> 表示传给插件的参数。</p></li><li><p><code>uses</code> 中用的就是别人写好的插件，持续集成由很多操作组成，比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等，这些操作都用共性，GitHub 就允许其他人把写好的插件共享到插件市场供其他人使用，因此如果你需要某个 action，不必自己写复杂的脚本，直接引用他人写好的 action 即可.</p></li><li><p><code>secrets.XXX</code> 这个 XXX 表示本<code>仓库的环境变量</code>，配置在仓库设置里面的 <code>secrets</code> 菜单拦，都是加密的。</p></li></ul></li></ul></li></ul></li></ul><p> </p><p>上述文件先别着急 push，一旦 push，这些 actions 就会执行，在参数正确的配置之前，报错那是肯定的。</p><p>接下来说一下一些参数的意义以及如何确定这些参数的值。</p><p> </p><h3 id="secrets-access-token" tabindex="-1"><a class="header-anchor" href="#secrets-access-token"><span>secrets.ACCESS_TOKEN</span></a></h3><p>对应的配置代码：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>      - name: 构建文档
        env:
          NODE_OPTIONS: --max_old_space_size=8192
        run: |-
          pnpm run docs:build
          touch src/.vuepress/dist/.nojekyll

      - name: 部署文档
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          # 这是文档部署到的分支名称
          branch: gh-pages
          folder: src/.vuepress/dist
          token: \${{ secrets.ACCESS_TOKEN }}
          repository-name: Megestus/Depot2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="步骤分析" tabindex="-1"><a class="header-anchor" href="#步骤分析"><span>步骤分析</span></a></h3><p>这段 GitHub Actions 工作流配置包含了两个主要的步骤：构建文档和部署文档。下面是每个步骤的分析：</p><ol><li><p><strong>构建文档</strong>:</p><ul><li><strong>作用</strong>: 这个步骤使用 <code>pnpm</code> 命令来构建你的文档网站，可能是使用 VuePress 或类似的静态网站生成器。</li><li><strong>环境变量 <code>NODE_OPTIONS</code></strong>: 设置了环境变量 <code>NODE_OPTIONS</code> 为 <code>--max_old_space_size=8192</code>，这意味着在这个步骤中，Node.js 的进程将被允许使用最多8192MB（8GB）的旧生代内存空间。这通常用于避免构建过程中因内存不足而失败。</li><li><strong>命令</strong>: <ul><li><code>pnpm run docs:build</code>：运行定义在 <code>package.json</code> 中的 <code>docs:build</code> 脚本来构建文档网站。</li><li><code>touch src/.vuepress/dist/.nojekyll</code>：通过 <code>touch</code> 命令创建 <code>.nojekyll</code> 文件，禁止 GitHub Pages 忽略以 <code>_</code> 开头的文件和目录。</li></ul></li></ul></li><li><p><strong>部署文档</strong>:</p><ul><li><strong>作用</strong>: 使用 <code>JamesIves/github-pages-deploy-action@v4</code> 这个 Action 将构建好的文档部署到 GitHub Pages。</li><li><strong>配置项</strong>: <ul><li><code>branch</code>: 指定要将文档部署到的分支名称，这里是 <code>gh-pages</code>。GitHub Pages 将会从这个分支读取内容并发布网站。</li><li><code>folder</code>: 指出构建好的文档存放的目录，这里是 <code>src/.vuepress/dist</code>。这个目录应该是静态网站生成器构建过程的输出。</li><li><code>token</code>: 使用 <code>secrets.ACCESS_TOKEN</code> 来认证 GitHub 的操作。这个密钥需要在仓库的设置中配置，它应该具有足够的权限来推送到目标分支。注意，这里使用的是 <code>ACCESS_TOKEN</code>，你需要确保在仓库的 Secrets 中正确设置了这个令牌。</li><li><code>repository-name</code>: 指定目标仓库的名称，格式为 <code>用户名/仓库名</code>。在这个示例中，文档将被部署到 <code>Megestus/Depot2</code> 仓库的 <code>gh-pages</code> 分支。</li></ul></li></ul></li></ol><p>这个配置的目的是自动化构建和部署文档到指定的 GitHub 仓库分支。</p><p> </p><h3 id="获取token以及设置github-secrets" tabindex="-1"><a class="header-anchor" href="#获取token以及设置github-secrets"><span>获取Token以及设置GitHub Secrets</span></a></h3><div class="image-preview"><img src="https://megestus-1309556466.cos.ap-shanghai.myqcloud.com/img/20240323123744.png" style="width:95% !important;"></div><p>这个 ACCESS_TOKEN 是访问 GitHub API 的令牌，<br> 可以在 GitHub 主页，点击个人头像，Settings -&gt; Developer settings -&gt; Personal access tokens 进行生成或更新，<br> 第一次生成后你可以看到这个令牌，<code>ghp_xxxx</code> ，然后再也不会显示，因此你需要记下来。</p><div class="image-preview"><img src="https://megestus-1309556466.cos.ap-shanghai.myqcloud.com/img/20240323123939.png" style="width:95% !important;"></div><p>然后打开<code>仓库1</code>的设置页面，设置 secrets，加入环境变量</p><ul><li>name 是 <code>ACCESS_TOKEN</code></li><li>value 是 <code>ghp_xxxx</code></li></ul><p>如下图所示：</p><div class="image-preview"><img src="https://megestus-1309556466.cos.ap-shanghai.myqcloud.com/img/20240323124820.png" style="width:95% !important;"></div>`,26),h=e("br",null,null,-1),b=e("code",null,"ACCESS_TOKEN",-1),_=e("code",null,"ACCESS_TOKEN",-1),G=s(`<p> </p><h3 id="_2-上传并推送" tabindex="-1"><a class="header-anchor" href="#_2-上传并推送"><span>2.上传并推送</span></a></h3><h4 id="修改vuepress的访问根目录" tabindex="-1"><a class="header-anchor" href="#修改vuepress的访问根目录"><span>修改vuepress的访问根目录</span></a></h4><p>由于演示使用的是 <code>Depot1</code> 和 <code>Depot2</code> github pages 是需要仓库开源的，那么构建的目录就会出现在<code>Depot2</code> ，因此pages会发布到 <code>https://megestus.github.io/Depot2/ </code> 中。</p><p>我们需要在<code>\\src\\.vuepress\\config.ts</code>里修改配置文件,把<code>base</code>选项 由<code>&quot;/&quot;</code>改为<code>&quot;/Depot2&quot;</code>。</p><div class="language-config.ts line-numbers-mode" data-ext="config.ts" data-title="config.ts"><pre class="language-config.ts"><code>import { defineUserConfig } from &quot;vuepress&quot;;
import theme from &quot;./theme.js&quot;;

export default defineUserConfig({
  base: &quot;/Depot2&quot;,

  lang: &quot;zh-CN&quot;,
  title: &quot;博客演示&quot;,
  description: &quot;vuepress-theme-hope 的博客演示&quot;,

  theme,

  // 和 PWA 一起启用
  // shouldPrefetch: false,
});

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述内容都设置好后- 就把仓库进行push 推送到github<code>仓库1</code>内。</p><p>等待 GitHubActions 配置完成</p><div class="image-preview"><img src="https://megestus-1309556466.cos.ap-shanghai.myqcloud.com/img/20240323192904.png" style="width:95% !important;"></div><p>并且我们还需要在<code>仓库2</code>的设置-分支里重命名分支 <code>gh-pages</code></p><div class="image-preview"><img src="https://megestus-1309556466.cos.ap-shanghai.myqcloud.com/img/20240323193033.png" style="width:95% !important;"></div><p>然后就能通过pages 访问到页面啦</p><p><a href="https://megestus.github.io/Depot2/" target="_blank" rel="noopener noreferrer">https://megestus.github.io/Depot2/</a></p><div class="image-preview"><img src="https://megestus-1309556466.cos.ap-shanghai.myqcloud.com/img/20240323193258.png" style="width:95% !important;"></div><p> </p><p>工作流运行完毕后，GitHub 会提供执行结果，帮助我们快速定位成功或失败的原因。通过日志分析，我们可以有效地调试和优化工作流。</p><div class="image-preview"><img src="https://megestus-1309556466.cos.ap-shanghai.myqcloud.com/img/20240323194606.png" style="width:95% !important;"></div><h3 id="github-pages的使用限制" tabindex="-1"><a class="header-anchor" href="#github-pages的使用限制"><span>GitHub Pages的使用限制</span></a></h3><p><strong>GitHub Pages的使用限制</strong>： 源仓库大小建议限制为 1GB，包括作为静态网站的文件。 网站的每月访问流量被限制为 100GB，这是一个软带宽限制。 每小时提交到 GitHub Pages的版本限制为 10 个，这也是一个软限制。</p><p>参考：<br> - <a href="https://zhuanlan.zhihu.com/p/364366127" target="_blank" rel="noopener noreferrer">GitHub Actions入门教程-自动部署静态博客</a></p>`,20);function f(y,A){const l=n("RouteLink"),o=n("Badge");return u(),a("div",null,[m,d(" more "),v,e("blockquote",null,[e("p",null,[i("在这里构建会有个"),t(l,{to:"/demo/vuepress/vuepressdebug.html#vuepress-vite.js%E7%9A%84%E6%A8%A1%E5%9D%97%E4%B8%A2%E5%A4%B1"},{default:r(()=>[i("vuepress-vite.js的模块丢失的报错 -点击跳转")]),_:1})])]),g,e("blockquote",null,[t(o,{text:"注意",color:"orange"}),i(),h,i(" GitHub Secrets 设置："),b,i(" 需要在触发 GitHub Actions 工作流的仓库内的 Secrets 设置中进行设置。 这意味着如果你的工作流配置文件位于当前仓库（Depot1），并且你希望从这个仓库部署到目标仓库（Depot2），那么你应该在 Depot1 的 Secrets 中设置 "),_,i("。")]),G])}const w=c(p,[["render",f],["__file","GitHubActions.html.vue"]]),x=JSON.parse('{"path":"/server/app/GitHubActions.html","title":"GitHubActions-自动化","lang":"zh-CN","frontmatter":{"title":"GitHubActions-自动化","description":"在这段时间里，使用 GitHub Actions 实现了静态博客的自动化部署。只需将更改推送到 GitHub 仓库，GitHub Actions 就会根据预先设定的配置文件自动执行相关部署操作。属实是非常强大，但还是有些不是很明白其中自动化的过程，接下来将学习记录一下这方面的内容。","icon":"fa-brands fa-github","category":"GitHub","tag":["GitHub","automation","Actions"],"date":"2024-03-23T00:00:00.000Z","cover":"https://megestus-1309556466.cos.ap-shanghai.myqcloud.com/img/20240323204105.png","head":[["meta",{"property":"og:url","content":"https:///about.md/blog/server/app/GitHubActions.html"}],["meta",{"property":"og:site_name","content":"Megestus"}],["meta",{"property":"og:title","content":"GitHubActions-自动化"}],["meta",{"property":"og:description","content":"在这段时间里，使用 GitHub Actions 实现了静态博客的自动化部署。只需将更改推送到 GitHub 仓库，GitHub Actions 就会根据预先设定的配置文件自动执行相关部署操作。属实是非常强大，但还是有些不是很明白其中自动化的过程，接下来将学习记录一下这方面的内容。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://megestus-1309556466.cos.ap-shanghai.myqcloud.com/img/20240323204105.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-15T09:07:27.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://megestus-1309556466.cos.ap-shanghai.myqcloud.com/img/20240323204105.png"}],["meta",{"name":"twitter:image:alt","content":"GitHubActions-自动化"}],["meta",{"property":"article:author","content":"Megestus"}],["meta",{"property":"article:tag","content":"GitHub"}],["meta",{"property":"article:tag","content":"automation"}],["meta",{"property":"article:tag","content":"Actions"}],["meta",{"property":"article:published_time","content":"2024-03-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-15T09:07:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"GitHubActions-自动化\\",\\"image\\":[\\"https://megestus-1309556466.cos.ap-shanghai.myqcloud.com/img/20240323204105.png\\"],\\"datePublished\\":\\"2024-03-23T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-15T09:07:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Megestus\\",\\"url\\":\\"https://github.com/Megestus\\"}]}"]]},"headers":[{"level":2,"title":"定一个小目标","slug":"定一个小目标","link":"#定一个小目标","children":[]},{"level":2,"title":"理解 GitHub Actions","slug":"理解-github-actions","link":"#理解-github-actions","children":[{"level":3,"title":"1. 触发事件（Triggers）：","slug":"_1-触发事件-triggers","link":"#_1-触发事件-triggers","children":[]},{"level":3,"title":"2. 工作流（Workflows）：","slug":"_2-工作流-workflows","link":"#_2-工作流-workflows","children":[]},{"level":3,"title":"3. 任务（Jobs）：","slug":"_3-任务-jobs","link":"#_3-任务-jobs","children":[]},{"level":3,"title":"4. 步骤（Steps）：","slug":"_4-步骤-steps","link":"#_4-步骤-steps","children":[]},{"level":3,"title":"5. 结果和反馈：","slug":"_5-结果和反馈","link":"#_5-结果和反馈","children":[]}]},{"level":2,"title":"实战演习","slug":"实战演习","link":"#实战演习","children":[{"level":3,"title":"1.创建好仓库","slug":"_1-创建好仓库","link":"#_1-创建好仓库","children":[]},{"level":3,"title":"YAML 格式","slug":"yaml-格式","link":"#yaml-格式","children":[]},{"level":3,"title":"secrets.ACCESS_TOKEN","slug":"secrets-access-token","link":"#secrets-access-token","children":[]},{"level":3,"title":"步骤分析","slug":"步骤分析","link":"#步骤分析","children":[]},{"level":3,"title":"获取Token以及设置GitHub Secrets","slug":"获取token以及设置github-secrets","link":"#获取token以及设置github-secrets","children":[]},{"level":3,"title":"2.上传并推送","slug":"_2-上传并推送","link":"#_2-上传并推送","children":[]},{"level":3,"title":"GitHub Pages的使用限制","slug":"github-pages的使用限制","link":"#github-pages的使用限制","children":[]}]}],"git":{"createdTime":1711204216000,"updatedTime":1718442447000,"contributors":[{"name":"Megestus","email":"2624203622@qq.com","commits":5}]},"filePathRelative":"server/app/GitHubActions.md","localizedDate":"2024年3月23日","excerpt":"<p>在这段时间里，使用 GitHub Actions 实现了静态博客的自动化部署。只需将更改推送到 GitHub 仓库，GitHub Actions 就会根据预先设定的配置文件自动执行相关部署操作。属实是非常强大，但还是有些不是很明白其中自动化的过程，接下来将学习记录一下这方面的内容。</p>\\n","autoDesc":true}');export{w as comp,x as data};
