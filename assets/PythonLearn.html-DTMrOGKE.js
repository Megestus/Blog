import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,b as a,d as e,f as t,o as p}from"./app-BlI6hWAJ.js";const o={},l=e("p",null,"学习Python基础的一些笔记",-1),i=t(`<p>先看这个文档再看其他的。 -Python快速入门教程文档-<br><a href="https://doc.megestu.top/project-2/" target="_blank" rel="noopener noreferrer">Maya Python教程 - myDoc</a></p><p><a href="https://www.bilibili.com/video/BV1T5411H7CT?p=5" target="_blank" rel="noopener noreferrer">Maya Python脚本语法编写全面基础入门视频教程</a></p><p> </p><h2 id="_1-常用基础知识" tabindex="-1"><a class="header-anchor" href="#_1-常用基础知识"><span>1.常用基础知识</span></a></h2><h3 id="命令文档" tabindex="-1"><a class="header-anchor" href="#命令文档"><span>命令文档</span></a></h3><p><a href="https://help.autodesk.com/view/MAYAUL/2020/CHS/index.html?contextId=COMMANDSPYTHON-INDEX" target="_blank" rel="noopener noreferrer">maya pyhton命令文档</a>  也可以右键选择 <strong>命令文档</strong> 进行打开</p><div class="image-preview"><img src="https://megestus-1309556466.cos.ap-shanghai.myqcloud.com/img/menu1.png" style="width:50% !important;"></div><h3 id="调用python访问命令api" tabindex="-1"><a class="header-anchor" href="#调用python访问命令api"><span>调用python访问命令API</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> maya <span class="token keyword">import</span> cmds
<span class="token comment">#转换-maya命令库提供给python使用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="mel-python语句对比" tabindex="-1"><a class="header-anchor" href="#mel-python语句对比"><span>mel python语句对比</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>
<span class="token comment"># polyCube -w 10 -h 10 -d 10 #这段则是mel的创建命令</span>
<span class="token keyword">from</span> maya <span class="token keyword">import</span> cmds <span class="token comment">#转换命令库</span>
cmds<span class="token punctuation">.</span>polyCube<span class="token punctuation">(</span>w<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>h<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>

<span class="token comment">#select -cl  ;#maya的取消 </span>
cmds<span class="token punctuation">.</span>select<span class="token punctuation">(</span>clear<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment">#这样一来就可以创建并取消选择对象</span>

<span class="token comment">#select -r pCube1 ;  maya里选择对象写法</span>
<span class="token comment">#doDelete; 删除</span>
cmds<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">&#39;pCube1&#39;</span><span class="token punctuation">,</span>replace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 选择（‘对象’，引用是正确的）</span>
cmds<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>                       <span class="token comment">#删除（）里的对象</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="小牛试刀-py创建模型" tabindex="-1"><a class="header-anchor" href="#小牛试刀-py创建模型"><span>小牛试刀 - py创建模型</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> maya <span class="token keyword">import</span> cmds
<span class="token keyword">print</span> cmds<span class="token punctuation">.</span>polyCube<span class="token punctuation">(</span> sx<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> sy<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> sz<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="image-preview"><img src="https://megestus-1309556466.cos.ap-shanghai.myqcloud.com/img/cube1.png" style="width:30% !important;"></div><p> </p><h2 id="_2-变量" tabindex="-1"><a class="header-anchor" href="#_2-变量"><span>2.变量</span></a></h2><p>变量的概念： 就是指认<mark>没有固定的值，可以改变的数</mark>，以非数字的符号来表达，称为变量。</p><ol><li><p>变量赋值：通过使用等号（=）运算符，你可以将一个值赋给变量。例如：<code>x = 5</code></p></li><li><p>变量命名规则：</p><ul><li>变量名必须以字母或下划线开头，并且只能包含字母、数字和下划线。</li><li>大小写敏感：<code>myVar</code> 和 <code>myvar</code> 是两个不同的变数。</li><li>避免使用 Python 关键词（如 <code>print</code>, <code>if</code>, <code>for</code> 等）作为变数名。</li></ul></li></ol><p> </p><h3 id="_2-1-认识变量的简单类型" tabindex="-1"><a class="header-anchor" href="#_2-1-认识变量的简单类型"><span>2.1-认识变量的简单类型</span></a></h3><h3 id="字符串-str" tabindex="-1"><a class="header-anchor" href="#字符串-str"><span>字符串 &#39;str&#39;</span></a></h3><p>对象类型- <mark>字符串</mark>     -通常用于表示单词或句子</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>
name<span class="token operator">=</span><span class="token string">&#39;my&#39;</span> <span class="token comment">#赋予字符串  </span>
<span class="token builtin">type</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment"># 类型（字符串）查询</span>
<span class="token comment"># 结果: &lt;type &#39;str&#39;&gt; # 结果可以看到提示为 str 字符串</span>
name <span class="token operator">=</span> name<span class="token operator">+</span><span class="token string">&#39;20&#39;</span> <span class="token comment">#基于原来的赋值相加  因为name已经存过一次数值在内存当中</span>
<span class="token keyword">print</span> name        <span class="token comment">#打印</span>
my20         <span class="token comment">#返回值</span>
name<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#还可以更改大小写</span>
<span class="token comment"># 结果: &#39;my20&#39; # </span>
 name<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 结果: &#39;my20&#39; #标签 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="整数-int" tabindex="-1"><a class="header-anchor" href="#整数-int"><span>整数 &#39;int&#39;</span></a></h3><p>对象类型- <mark>整数</mark>     整数代表的是数字</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>age<span class="token operator">=</span><span class="token number">20</span>        <span class="token comment">#整数也就是没有小数点的数</span>
<span class="token builtin">type</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>
<span class="token comment"># 结果: &lt;type &#39;int&#39;&gt; #   结果可以看到提示为 int  整数</span>

age<span class="token operator">=</span> age<span class="token operator">+</span><span class="token number">2</span>  <span class="token comment">#上面设置了年龄等于20  那么再相加打印出来就等于22</span>
age
<span class="token comment"># 结果: 22 #    </span>

name <span class="token operator">+</span> age
<span class="token comment"># 错误: TypeError: file &lt;maya console&gt; line 1: cannot concatenate &#39;str&#39; and &#39;int&#39; objects #   这里提示到错误，不允许两种不同的类型链接。需要转换为同一个类型才能得到正确返回值 ，上面说到字符串可以是任何数，可以转换为字符串</span>

name <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>       <span class="token comment">#转换age为字符串 </span>
<span class="token comment"># 结果: &#39;my22&#39; #   这样就能得到正确的返回值</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="浮点-float" tabindex="-1"><a class="header-anchor" href="#浮点-float"><span>浮点 &#39;float&#39;</span></a></h3><p>对象类型- <mark>浮点</mark> float</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>age <span class="token operator">=</span> <span class="token number">22.5</span>      <span class="token comment">#设置小数点的话，那么整数就会变成浮点</span>
<span class="token builtin">type</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>
<span class="token comment"># 结果: &lt;type &#39;float&#39;&gt; #  #这里返回值 就为 float 浮点</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="布尔-bool" tabindex="-1"><a class="header-anchor" href="#布尔-bool"><span>布尔 &#39;bool&#39;</span></a></h3><p>对象类型- <mark>布尔</mark> bool</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>lying <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token comment"># 谎言 等于 假 布尔值</span>
<span class="token builtin">type</span><span class="token punctuation">(</span>lying<span class="token punctuation">)</span> 
<span class="token comment"># 结果: &lt;type &#39;bool&#39;&gt; #  显示为布尔类型</span>

lying <span class="token operator">=</span> <span class="token keyword">not</span> lying  <span class="token comment">#这时候加上 not不等于原来的布尔值 那么就等于 真</span>
<span class="token keyword">print</span> lying   
<span class="token comment"># 结果: True #    那么lyling就得到是 真 的返回值 </span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="非类型-nonetype" tabindex="-1"><a class="header-anchor" href="#非类型-nonetype"><span>非类型 &#39;NoneType&#39;</span></a></h3><p>对象类型 - <mark>非类型</mark> None</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>nothing <span class="token operator">=</span> <span class="token boolean">None</span>   <span class="token comment">#就是没有  设置对象为空 也可以把原有的对象的值设置没</span>
<span class="token builtin">type</span><span class="token punctuation">(</span>nothing<span class="token punctuation">)</span>
<span class="token comment"># 错误: TypeError: file &lt;maya console&gt; line 1: &#39;NoneType&#39; object is not callable #  提示没类型</span>

my <span class="token operator">=</span><span class="token string">&#39;hahaha&#39;</span>
my
<span class="token comment"># 结果: &#39;hahaha&#39; # 返回为 hahaha</span>
my <span class="token operator">=</span><span class="token boolean">None</span>
my        <span class="token comment">#返回为空</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p> </p><h3 id="_2-2-认识变量的合集类型" tabindex="-1"><a class="header-anchor" href="#_2-2-认识变量的合集类型"><span>2.2-认识变量的合集类型</span></a></h3><h3 id="列表-list" tabindex="-1"><a class="header-anchor" href="#列表-list"><span>列表 &#39;list&#39;</span></a></h3><p>首先是 <mark>列表</mark> list</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>
<span class="token builtin">list</span>
<span class="token comment"># 结果: &lt;type &#39;list&#39;&gt; #  类型为列表</span>

myList <span class="token operator">=</span><span class="token punctuation">[</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>lying<span class="token punctuation">]</span>    <span class="token comment">#那么我的列表内 为名字+年龄+是否</span>
myList 
<span class="token comment"># 结果: [&#39;my&#39;, 22.5, True] # 那么就得到对应的列表内容</span>

name <span class="token operator">=</span><span class="token string">&#39;liangzai&#39;</span>     <span class="token comment">#这时候把名字改为靓仔 </span>
<span class="token builtin">list</span>              <span class="token comment">#再打一次</span>
<span class="token comment"># 结果: [&#39;my&#39;, 22.5, True]  #则显示结果还没改过来，是因为</span>
                 <span class="token comment">#zhubin这个值是前面创建的。如果想把列表中的第一一个值改为</span>
                 <span class="token comment">#靓仔，则需要把对应的列表数位改等刚刚设置的对象。</span>
                 
myList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span> name  <span class="token comment">#电脑中数字的开始都是012并不是123所以第一个单位是0</span>
myList
<span class="token comment"># 结果: [&#39;liangzai&#39;, 22.5, True] #  可以看到它取代了前一个值</span>

<span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">18</span>   <span class="token comment">#我把年龄改为18 那么下面得到的结果就是 18岁没错</span>
<span class="token builtin">list</span>
<span class="token comment"># 结果: [&#39;liangzai&#39;, 18, True] # </span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="元组-tuple" tabindex="-1"><a class="header-anchor" href="#元组-tuple"><span>元组 tuple</span></a></h3><p>元组 tuple 用小括号 和列表的区别是他是不可变的</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>mytuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span>
mytuple
<span class="token comment"># 结果: (None, 18, True) # </span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字典-dict" tabindex="-1"><a class="header-anchor" href="#字典-dict"><span>字典 Dict</span></a></h3><p>操作符，用花括号 { } 形象的说就是用来操作数据的工具， 包括数学操作符， 比较操作符， 逻辑操作符</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>mydict <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">&#39;my&#39;</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span>lying<span class="token punctuation">:</span><span class="token boolean">False</span><span class="token punctuation">}</span>
mydict
<span class="token comment"># 结果: {True: False, 18: 100, &#39;hahaha&#39;: &#39;my&#39;} # </span>
<span class="token comment">#就返回了  修改的对象，但是并不是实际的命令</span>
<span class="token builtin">list</span>
<span class="token comment"># [&#39;liangzai&#39;, 18, True] # </span>
<span class="token comment">#就感觉单纯的改引号，没啥用处的样子...</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p> </p><h2 id="_3-实战环节" tabindex="-1"><a class="header-anchor" href="#_3-实战环节"><span>3.实战环节</span></a></h2><h3 id="使用变量" tabindex="-1"><a class="header-anchor" href="#使用变量"><span>使用变量</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> maya <span class="token keyword">import</span> cmds <span class="token comment">#首先还是调用API</span>

cube <span class="token operator">=</span> cmds<span class="token punctuation">.</span>polyCube<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">#定义变量cube   为创建一个box</span>
circle <span class="token operator">=</span> cmds<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">#定义变量circle 为创建一个曲线圈</span>

cmds<span class="token punctuation">.</span>parent<span class="token punctuation">(</span>cube<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>circle<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                              <span class="token comment">#执行 父子链接P 对象cube 和circle 从列表</span>
                              <span class="token comment">#的第一个开始算起</span>
                              <span class="token comment">#这样就能不断的调用名为cube和circle的变量</span>
                              <span class="token comment">#进行P绑定</span>
                              <span class="token comment">#因为是数列嘛，然后回有很多，如果是直接执行#创建box的话 这样名字就对象名字就锁定为一个了。就不能批量绑定。</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="for-循环" tabindex="-1"><a class="header-anchor" href="#for-循环"><span>for 循环</span></a></h3><p>是指 一个对象执行完成后到下一个对象执行同一遍的操作 直至最后一个对象完成<br> 可以查看<a href="https://doc.megestu.top/doc/5/" target="_blank" rel="noopener noreferrer">文档</a>中的for循环的详细说明</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> maya <span class="token keyword">import</span> cmds

objectList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;cube&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;sphere&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;cone&#39;</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> obj <span class="token keyword">in</span> objectList<span class="token punctuation">:</span>  <span class="token comment">#for循环:后回车回生成前4个空格进缩，正好为4个格子</span>
    <span class="token keyword">print</span> <span class="token string">&quot;the object name is&quot;</span><span class="token punctuation">,</span> obj  

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回值</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>the <span class="token builtin">object</span> name <span class="token keyword">is</span> cube 
the <span class="token builtin">object</span> name <span class="token keyword">is</span> sphere
the <span class="token builtin">object</span> name <span class="token keyword">is</span> cone  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>objectList <span class="token operator">=</span> <span class="token punctuation">[</span>cmds<span class="token punctuation">.</span>polyCube<span class="token punctuation">,</span>cmds<span class="token punctuation">.</span>polySphere<span class="token punctuation">,</span>cmds<span class="token punctuation">.</span>polyCone<span class="token punctuation">]</span>
<span class="token keyword">for</span> obj <span class="token keyword">in</span> objectList<span class="token punctuation">:</span>
    obj<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">#这样就能得到几个不同的polymesh。</span>
    
cmds<span class="token punctuation">.</span>polyCube（）     
cmds<span class="token punctuation">.</span>polySphere（） 
cmds<span class="token punctuation">.</span>polyCone（）
  <span class="token comment">#这样这是原始的创建方法-使用for循环创建的话，就能再数列当中无限加对象，并且还可以定义循环很多次。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="while循环" tabindex="-1"><a class="header-anchor" href="#while循环"><span>while循环</span></a></h3><p>这与for循环有点相似，但不是再列表里，有点像是判断，判断对了就执行真，如果错了就执行假，假就一直循环直至到真，就结束。当然，没有真的结果给它的话，就会不断的执行，直至你的内存满了，或者软件崩溃。需要多多注意。一定要给判定结果。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>i <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span> i
    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="image-preview"><img src="https://megestus-1309556466.cos.ap-shanghai.myqcloud.com/img/while.png" style="width:35% !important;"></div><h3 id="if-和-eles-语句条件" tabindex="-1"><a class="header-anchor" href="#if-和-eles-语句条件"><span>if 和 eles 语句条件</span></a></h3><p>一个相等的符号 ,赋予一个值，一个双重相等的符号比较它</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> maya <span class="token keyword">import</span> cmds

numObjects <span class="token operator">=</span> <span class="token number">5</span>           
mode <span class="token operator">=</span> <span class="token string">&quot;Cone&quot;</span>         

<span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>numObjects<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment"># &quot;for&quot;循环  </span>
    <span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token string">&quot;Cube&quot;</span><span class="token punctuation">:</span>  
        obj <span class="token operator">=</span> cmds<span class="token punctuation">.</span>polyCube<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> mode <span class="token operator">==</span> <span class="token string">&quot;Sphere&quot;</span><span class="token punctuation">:</span>
        obj <span class="token operator">=</span> cmds<span class="token punctuation">.</span>polySphere<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> mode <span class="token operator">==</span> <span class="token string">&quot;Cone&quot;</span><span class="token punctuation">:</span>
        obj <span class="token operator">=</span> cmds<span class="token punctuation">.</span>polyCone<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">&quot;出错了，打印一下&quot;</span>
        cmds<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">&quot;报错啦，除了Cube，Sphere，Cone，都不能执行~~~&quot;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="设置对象参数-setattr" tabindex="-1"><a class="header-anchor" href="#设置对象参数-setattr"><span>设置对象参数 setAttr()</span></a></h3><p><code>setattr()</code> 是 Python 的一个内置函数，用于设置对象的属性值。它接受三个参数：对象、属性名和要设置的值。</p><p>以下是 <code>setattr()</code> 函数的语法：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token builtin">setattr</span><span class="token punctuation">(</span>对象<span class="token punctuation">,</span> 属性名<span class="token punctuation">,</span> 值<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解释一下这些参数：</p><ul><li><strong>对象</strong>：表示要修改其属性值的对象。</li><li><strong>属性名</strong>：表示要修改或添加到该对象中的属性名称。</li><li><strong>值</strong>：表示将被赋给指定属性的新值。</li></ul><p>使用 <code>setattr()</code> 函数时，可以动态地在运行时为一个已存在或全新创建（如果不存在） 的类实例添加、更新或更改特定名称和对应类型的任意数量和类型字段。这对于需要根据程序逻辑进行灵活操作并根据不同条件来调整类实例中某些字段非常有用。</p><p>示例:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> maya <span class="token keyword">import</span> cmds

obj <span class="token operator">=</span> cmds<span class="token punctuation">.</span>polyCube<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token operator">//</span> 定义对象obj<span class="token operator">=</span>创建一个cube

cmds<span class="token punctuation">.</span>setAttr<span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">&#39;.translateX&#39;</span><span class="token punctuation">,</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>cmds.setAttr()</code>：设置对象属性值。</li><li><code>obj[0]</code>：通过索引运算符 <code>[0]</code>，从名为 &quot;obj&quot; 的列表中获取第一个元素。假设该列表包含了要操作的对象名称。</li><li><code>&#39;.&#39; + &#39;translateX&#39;</code>：将字符串 &quot;.translateX&quot; 添加到前面获取到的对象名称之后，以构建完整属性路径。表示要修改或设置 &quot;translateX&quot; 属性。</li><li><code>random.randint(0,20)</code>：调用 random 模块中 randint() 函数生成介于 0 和 20 （包括两个边界）之间（即闭区间） 的随机整数作为新属性值。</li></ol><p> </p><h3 id="小总结" tabindex="-1"><a class="header-anchor" href="#小总结"><span>小总结</span></a></h3><p>实现-创建模型-然后选择模型-然后进行范围性随机散部。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> maya <span class="token keyword">import</span> cmds
<span class="token keyword">import</span> random

<span class="token keyword">def</span> <span class="token function">createObjects</span><span class="token punctuation">(</span>mode<span class="token punctuation">,</span>numObjects<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">#定义函数</span>
    objList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">#存储在 objList 列表中</span>
    
    <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>numObjects<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">#定义循环迭代对象</span>
        <span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token string">&#39;Cube&#39;</span><span class="token punctuation">:</span>     <span class="token comment">#如果mode是cube</span>
            obj <span class="token operator">=</span> cmds<span class="token punctuation">.</span>polyCube<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#那么就创建cube</span>
        <span class="token keyword">elif</span> mode <span class="token operator">==</span> <span class="token string">&#39;Sphere&#39;</span><span class="token punctuation">:</span>   <span class="token comment">#如果mode是Sphere</span>
            obj <span class="token operator">=</span> cmds<span class="token punctuation">.</span>polySphere<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#那么就创建Sphere</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment">#如果都不是</span>
            cmds<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">&quot;I can&#39;t create it&quot;</span><span class="token punctuation">)</span> <span class="token comment">#那就报错-说 &quot;I can&#39;t create it&quot;</span>
            
        objList<span class="token punctuation">.</span>append<span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#将创建的对象名称添加到 \`objList\` 列表中。这里使用了索引 \`[0]\` 来获取创建对象返回列表中的第一个元素。</span>
        
    <span class="token keyword">return</span> objList    <span class="token comment"># 将包含所有创建对象名称的列表作为函数结果返回</span>
           
createObjects<span class="token punctuation">(</span><span class="token string">&#39;Cube&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment">#调用 \`createObjects(&#39;Cube&#39;, 3)\` 后，将会得到一个包含三个立方体对象名称的列表。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>
<span class="token keyword">def</span> <span class="token function">randomize</span><span class="token punctuation">(</span>objList<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> minValue<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> maxValue<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> objList <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span> 
        objList <span class="token operator">=</span> cmds<span class="token punctuation">.</span>ls<span class="token punctuation">(</span>selection<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>   <span class="token comment"># 获取当前选择的物体，并添加到objlist中</span>
        
    <span class="token keyword">for</span> obj <span class="token keyword">in</span> objList<span class="token punctuation">:</span>
        cmds<span class="token punctuation">.</span>setAttr<span class="token punctuation">(</span>obj<span class="token operator">+</span><span class="token string">&#39;.tx&#39;</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>minValue<span class="token punctuation">,</span>maxValue<span class="token punctuation">)</span><span class="token punctuation">)</span>
        cmds<span class="token punctuation">.</span>setAttr<span class="token punctuation">(</span>obj<span class="token operator">+</span><span class="token string">&#39;.ty&#39;</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>minValue<span class="token punctuation">,</span>maxValue<span class="token punctuation">)</span><span class="token punctuation">)</span>
        cmds<span class="token punctuation">.</span>setAttr<span class="token punctuation">(</span>obj<span class="token operator">+</span><span class="token string">&#39;.tz&#39;</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>minValue<span class="token punctuation">,</span>maxValue<span class="token punctuation">)</span><span class="token punctuation">)</span>

randomize<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">#随机模型   </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>首先，定义了一个函数： <ul><li><code>randomize(objList=None, minValue=0, maxValue=10)</code>：此函数用于随机化给定对象列表中对象的位置属性。它接受三个参数：objList 表示要随机化的对象列表，默认为 None；minValue 和 maxValue 表示位置属性取值范围，默认分别为 0 和 10。如果未提供 objList 参数，则使用 Maya 中当前选择的物体作为默认值。</li></ul></li><li>在函数内部： <ul><li>如果没有传入 objList 参数（即 objList is None），则通过 <code>cmds.ls(selection=True)</code> 获取当前在 Maya 中选择的物体，并将其赋值给 objList 变量。</li></ul></li><li>接下来，使用循环遍历传入或获取到的每个物体名称（存储在 obj 变量中）： <ul><li>使用 <code>cmds.setAttr()</code> 函数和 random.randint() 方法来设置每个物体对应轴向上 (tx、ty、tz) 的位置属性，在指定范围内生成一个随机整数，并将其赋值给相应轴向上该物体所属节点。</li></ul></li></ol><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment">#把上面的函数结合 </span>
<span class="token comment">#创建对象-然后调用随机函数-把模型随机摆放</span>
objList <span class="token operator">=</span> createObjects<span class="token punctuation">(</span><span class="token string">&#39;Cube&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment">#创建对象+个数</span>
randomize<span class="token punctuation">(</span>objList<span class="token punctuation">)</span>   <span class="token comment">#随机列表模型    </span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p> </p><h2 id="strings-格式化" tabindex="-1"><a class="header-anchor" href="#strings-格式化"><span>Strings 格式化</span></a></h2><blockquote><p>ps：&quot;%s&quot; 它可以避免很多小错误-例如转换值。或者其他小错误</p></blockquote><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token string">&quot;hallo my name is &quot;</span> <span class="token operator">+</span> <span class="token string">&quot;ben&quot;</span>

<span class="token comment"># 结果: &#39;hallo my name is ben&#39; # </span>

name <span class="token operator">=</span> <span class="token string">&quot;ben&quot;</span>
<span class="token string">&quot;hallo my name is &quot;</span> <span class="token operator">+</span> name
<span class="token comment"># 结果: &#39;hallo my name is ben&#39; # </span>

<span class="token string">&quot;hallo my name is %s&quot;</span> <span class="token operator">%</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> 
<span class="token comment"># 结果: &#39;hallo my name is ben&#39; # %s可以简单的替换当前位</span>

<span class="token string">&quot;hallo my name is %s ,i am from %s and i am %s years old&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token string">&quot;china&quot;</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span>
<span class="token comment"># 结果: &#39;hallo my name is ben ,i am from china and i am 22 years old&#39; # </span>
<span class="token comment"># 也能这样 按顺序替换 </span>
<span class="token string">&quot;hallo my name is {} ,i am from {} and i am {} years old&quot;</span><span class="token punctuation">.</span> <span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token string">&quot;china&quot;</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span>
<span class="token comment"># 结果: &#39;hallo my name is ben ,i am from china and i am 22 years old&#39; # </span>
<span class="token comment">#花括号</span>
<span class="token string">&quot;hallo my name is {0} ,i am from {1} and i am {2} years old&quot;</span><span class="token punctuation">.</span> <span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token string">&quot;china&quot;</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span>
<span class="token comment"># 结果: &#39;hallo my name is ben ,i am from china and i am 22 years old&#39; # </span>
<span class="token comment">#序号</span>
<span class="token string">&quot;hallo my name is {name} ,i am from {age} and i am {country} years old&quot;</span><span class="token punctuation">.</span> <span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token operator">=</span>name<span class="token punctuation">,</span>country<span class="token operator">=</span><span class="token string">&quot;china&quot;</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">)</span>
<span class="token comment"># 结果: &#39;hallo my name is ben ,i am from 22 and i am china years old&#39; # </span>
<span class="token comment">##还可以花括号定义对应的变量</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p> </p><h2 id="变量作用域-variable-scopes" tabindex="-1"><a class="header-anchor" href="#变量作用域-variable-scopes"><span>变量作用域 Variable Scopes</span></a></h2><p>讲到一个新概念 <strong>作用域</strong> ，顾名思义，作用在不同的环境区域。</p><table><thead><tr><th>简写</th><th>作用环境</th><th></th></tr></thead><tbody><tr><td>L= local</td><td>本地变量</td><td></td></tr><tr><td>E= Enclosed</td><td>封闭变量</td><td>在函数内的部调用 外部不能调用到的</td></tr><tr><td>G= Global</td><td>全局变量</td><td></td></tr><tr><td>B= Built-in</td><td>内置变量</td><td>在python 内置的变量 随时都可以访问</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>myGlobal <span class="token operator">=</span> <span class="token string">&#39;Glodal Value&#39;</span>              <span class="token comment">#这有三个变量-全局变量 封闭变量 本地变量 </span>
                                       <span class="token comment">#还有两个封闭函数</span>
<span class="token keyword">def</span> <span class="token function">Enclosing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    myEnclosing <span class="token operator">=</span> <span class="token string">&#39;Enclosing Value&#39;</span>   <span class="token comment">#myEnclosing 封闭变量和本地变量只能在这个函数内调用</span>
    <span class="token keyword">def</span> <span class="token function">LocalFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        myLocal <span class="token operator">=</span> <span class="token string">&#39;Local Value&#39;</span> <span class="token operator">+</span> myEnclosing   
        <span class="token keyword">print</span> myLocal

    LocalFunction<span class="token punctuation">(</span><span class="token punctuation">)</span>

Enclosing<span class="token punctuation">(</span><span class="token punctuation">)</span> 


Local ValueEnclosing Value  <span class="token comment"># 会得返回这些值</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p> </p><h2 id="两种外部编辑调用方式" tabindex="-1"><a class="header-anchor" href="#两种外部编辑调用方式"><span>两种外部编辑调用方式</span></a></h2><h3 id="_1-路径插件-调用" tabindex="-1"><a class="header-anchor" href="#_1-路径插件-调用"><span>1.路径插件-调用</span></a></h3><p>把代码命名存为 <code>random.py</code> -放到maya的插件路径。 <code>C:\\Users\\xxx\\Documents\\maya\\2018\\scripts</code></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> maya <span class="token keyword">import</span> cmds      
<span class="token keyword">import</span> random         <span class="token comment">#开头带上导入</span>
            
<span class="token keyword">from</span> maya <span class="token keyword">import</span> cmds
<span class="token keyword">import</span> random

<span class="token keyword">def</span> <span class="token function">createObjects</span><span class="token punctuation">(</span>mode<span class="token punctuation">,</span>numObjects<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token triple-quoted-string string">&quot;&quot;&quot;帮助-解释&quot;&quot;&quot;</span>
    objList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    
    <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>numObjects<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token string">&#39;Cube&#39;</span><span class="token punctuation">:</span>
            obj <span class="token operator">=</span> cmds<span class="token punctuation">.</span>polyCube<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">elif</span> mode <span class="token operator">==</span> <span class="token string">&#39;Sphere&#39;</span><span class="token punctuation">:</span>
            obj <span class="token operator">=</span> cmds<span class="token punctuation">.</span>polySphere<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            cmds<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">&quot;i dont konw what to create&quot;</span><span class="token punctuation">)</span>
  
        objList<span class="token punctuation">.</span>append<span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        
    <span class="token keyword">return</span> objList    


<span class="token keyword">def</span> <span class="token function">randomize</span><span class="token punctuation">(</span>objList<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> minValue<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> maxValue<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> objList <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        objList <span class="token operator">=</span> cmds<span class="token punctuation">.</span>ls<span class="token punctuation">(</span>selection<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
        
    <span class="token keyword">for</span> obj <span class="token keyword">in</span> objList<span class="token punctuation">:</span>
        cmds<span class="token punctuation">.</span>setAttr<span class="token punctuation">(</span>obj<span class="token operator">+</span><span class="token string">&#39;.tx&#39;</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>minValue<span class="token punctuation">,</span>maxValue<span class="token punctuation">)</span><span class="token punctuation">)</span>
        cmds<span class="token punctuation">.</span>setAttr<span class="token punctuation">(</span>obj<span class="token operator">+</span><span class="token string">&#39;.ty&#39;</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>minValue<span class="token punctuation">,</span>maxValue<span class="token punctuation">)</span><span class="token punctuation">)</span>
        cmds<span class="token punctuation">.</span>setAttr<span class="token punctuation">(</span>obj<span class="token operator">+</span><span class="token string">&#39;.tz&#39;</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>minValue<span class="token punctuation">,</span>maxValue<span class="token punctuation">)</span><span class="token punctuation">)</span>
 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在脚本编辑器上输入调用命令</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> random   <span class="token comment">#指认对应插件名称</span>
random<span class="token punctuation">.</span>createObjects<span class="token punctuation">(</span><span class="token string">&#39;Cube&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment">#创建对象个数</span>
<span class="token comment">#单独执行某一命令</span>
random<span class="token punctuation">.</span>randomize<span class="token punctuation">(</span>objList<span class="token punctuation">)</span>       <span class="token comment">#随机模型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-vscode调用-python环境部署" tabindex="-1"><a class="header-anchor" href="#_2-vscode调用-python环境部署"><span>2.VsCode调用 Python环境部署</span></a></h3><p><a href="https://www.bilibili.com/video/BV1Cz4y1R7MC" target="_blank" rel="noopener noreferrer">Python开发Maya脚本插件 开发环境详细配置 （VS Code | PyCharm）</a><br> 按着这个视频部署好一些 不用那么多东西。</p><h4 id="vscode链接" tabindex="-1"><a class="header-anchor" href="#vscode链接"><span>VsCode链接</span></a></h4><p>重要：<br> VsCode项目的python文件需要保存在对应maya文档插件目录下<br><code>C:\\Users\\xxx\\Documents\\maya\\2020\\zh_CN\\scripts</code></p><blockquote><p>Python 重载 因为插件一般调用只会自上而下执行一遍就没了 如果执行第二遍，会没反应，那么这时候就需要 reload()</p></blockquote><p>maya：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> Text1
<span class="token builtin">reload</span><span class="token punctuation">(</span>Text1<span class="token punctuation">)</span>  <span class="token comment">#()括号内要与pyfile名字一致</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>VsCode：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> maya <span class="token keyword">import</span> cmds     

<span class="token keyword">def</span> <span class="token function">showWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    name <span class="token operator">=</span> <span class="token string">&quot;tools&quot;</span>
    <span class="token keyword">if</span> cmds<span class="token punctuation">.</span>window<span class="token punctuation">(</span>name<span class="token punctuation">,</span>query<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> exists<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        cmds<span class="token punctuation">.</span>deleteUI<span class="token punctuation">(</span>name<span class="token punctuation">)</span>
    cmds<span class="token punctuation">.</span>window<span class="token punctuation">(</span>name<span class="token punctuation">)</span>
    cmds<span class="token punctuation">.</span>showWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p> </p><p><a href="https://www.bilibili.com/video/BV1T5411H7CT?p=26&amp;spm_id_from=pageDriver&amp;vd_source=e36f99094145021094d7f673ef1c1dcc" target="_blank" rel="noopener noreferrer">学习源-进度26</a></p>`,109);function c(u,d){return p(),s("div",null,[l,a(" more "),i])}const k=n(o,[["render",c],["__file","PythonLearn.html.vue"]]),v=JSON.parse(`{"path":"/posts/maya/PythonLearn.html","title":"PythonLearn","lang":"zh-CN","frontmatter":{"title":"PythonLearn","icon":"fa-brands fa-python","category":["maya"],"tag":["maya","Python"],"date":"2023-12-02T00:00:00.000Z","star":1,"description":"学习Python基础的一些笔记","head":[["meta",{"property":"og:url","content":"https:///about.md/blog/posts/maya/PythonLearn.html"}],["meta",{"property":"og:site_name","content":"Megestus"}],["meta",{"property":"og:title","content":"PythonLearn"}],["meta",{"property":"og:description","content":"学习Python基础的一些笔记"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-15T09:07:27.000Z"}],["meta",{"property":"article:author","content":"Megestus"}],["meta",{"property":"article:tag","content":"maya"}],["meta",{"property":"article:tag","content":"Python"}],["meta",{"property":"article:published_time","content":"2023-12-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-15T09:07:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"PythonLearn\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-12-02T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-15T09:07:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Megestus\\",\\"url\\":\\"https://github.com/Megestus\\"}]}"]]},"headers":[{"level":2,"title":"1.常用基础知识","slug":"_1-常用基础知识","link":"#_1-常用基础知识","children":[{"level":3,"title":"命令文档","slug":"命令文档","link":"#命令文档","children":[]},{"level":3,"title":"调用python访问命令API","slug":"调用python访问命令api","link":"#调用python访问命令api","children":[]},{"level":3,"title":"mel python语句对比","slug":"mel-python语句对比","link":"#mel-python语句对比","children":[]},{"level":3,"title":"小牛试刀 - py创建模型","slug":"小牛试刀-py创建模型","link":"#小牛试刀-py创建模型","children":[]}]},{"level":2,"title":"2.变量","slug":"_2-变量","link":"#_2-变量","children":[{"level":3,"title":"2.1-认识变量的简单类型","slug":"_2-1-认识变量的简单类型","link":"#_2-1-认识变量的简单类型","children":[]},{"level":3,"title":"字符串 'str'","slug":"字符串-str","link":"#字符串-str","children":[]},{"level":3,"title":"整数 'int'","slug":"整数-int","link":"#整数-int","children":[]},{"level":3,"title":"浮点 'float'","slug":"浮点-float","link":"#浮点-float","children":[]},{"level":3,"title":"布尔 'bool'","slug":"布尔-bool","link":"#布尔-bool","children":[]},{"level":3,"title":"非类型 'NoneType'","slug":"非类型-nonetype","link":"#非类型-nonetype","children":[]},{"level":3,"title":"2.2-认识变量的合集类型","slug":"_2-2-认识变量的合集类型","link":"#_2-2-认识变量的合集类型","children":[]},{"level":3,"title":"列表 'list'","slug":"列表-list","link":"#列表-list","children":[]},{"level":3,"title":"元组 tuple","slug":"元组-tuple","link":"#元组-tuple","children":[]},{"level":3,"title":"字典 Dict","slug":"字典-dict","link":"#字典-dict","children":[]}]},{"level":2,"title":"3.实战环节","slug":"_3-实战环节","link":"#_3-实战环节","children":[{"level":3,"title":"使用变量","slug":"使用变量","link":"#使用变量","children":[]},{"level":3,"title":"for  循环","slug":"for-循环","link":"#for-循环","children":[]},{"level":3,"title":"while循环","slug":"while循环","link":"#while循环","children":[]},{"level":3,"title":"if 和 eles 语句条件","slug":"if-和-eles-语句条件","link":"#if-和-eles-语句条件","children":[]},{"level":3,"title":"设置对象参数 setAttr()","slug":"设置对象参数-setattr","link":"#设置对象参数-setattr","children":[]},{"level":3,"title":"小总结","slug":"小总结","link":"#小总结","children":[]}]},{"level":2,"title":"Strings 格式化","slug":"strings-格式化","link":"#strings-格式化","children":[]},{"level":2,"title":"变量作用域 Variable Scopes","slug":"变量作用域-variable-scopes","link":"#变量作用域-variable-scopes","children":[]},{"level":2,"title":"两种外部编辑调用方式","slug":"两种外部编辑调用方式","link":"#两种外部编辑调用方式","children":[{"level":3,"title":"1.路径插件-调用","slug":"_1-路径插件-调用","link":"#_1-路径插件-调用","children":[]},{"level":3,"title":"2.VsCode调用 Python环境部署","slug":"_2-vscode调用-python环境部署","link":"#_2-vscode调用-python环境部署","children":[]}]}],"git":{"createdTime":1711204216000,"updatedTime":1718442447000,"contributors":[{"name":"Megestus","email":"2624203622@qq.com","commits":2}]},"filePathRelative":"posts/maya/PythonLearn.md","localizedDate":"2023年12月2日","excerpt":"<p>学习Python基础的一些笔记</p>\\n","autoDesc":true}`);export{k as comp,v as data};
