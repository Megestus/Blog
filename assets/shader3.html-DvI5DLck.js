import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,b as i,d as s,f as a,o as r}from"./app-BfHAAWql.js";const n={},d=s("p",null,"摘要：回顾渲染流程，尝试vs写shader，以及一些开放参数的了解。",-1),l=a(`<h2 id="回顾渲染流程" tabindex="-1"><a class="header-anchor" href="#回顾渲染流程"><span>回顾渲染流程</span></a></h2><p>以美术绘画的角度理解渲染管线，比较形象。</p><div class="image-preview"><img src="https://sky.megestu.top/i/12024/20240217170310.png" style="width:90% !important;"></div><table><thead><tr><th>渲染阶段</th><th></th><th>比喻角度</th></tr></thead><tbody><tr><td>模型</td><td>&gt;</td><td>石膏几何体 （看到现实中3d的物体）</td></tr><tr><td>输入结构</td><td>&gt;</td><td>几何体的基本几何构成 （脑海里得到的信息）</td></tr><tr><td>顶点shader</td><td>&gt;</td><td>通过透视理论加脑海里得到的信息 （在纸上画出基本大型）</td></tr><tr><td>输出结构</td><td>&gt;</td><td>通过顶点信息得到面向信息-也就是面的朝向 （在脑海里得知几何体的面朝向）</td></tr><tr><td>像素shader</td><td>&gt;</td><td>通过环境的灯光反射信息等-给每个面赋予素描关系（给在纸面上的大型添加素描关系）</td></tr><tr><td>渲染结果</td><td>&gt;</td><td>后处理就是 对前面的效果进行一点调整 （例如画完后习惯性用纸笔或者手胡一下）</td></tr></tbody></table><p> </p><h2 id="尝试shader代码" tabindex="-1"><a class="header-anchor" href="#尝试shader代码"><span>尝试shader代码</span></a></h2><p>首先是关联Unity里关联到VScode， 以shader forge新建基础的shader来识别代码，去看unity的基本代码结构。</p><h3 id="_1-untiy关联vscode" tabindex="-1"><a class="header-anchor" href="#_1-untiy关联vscode"><span>1.untiy关联VScode</span></a></h3><div class="image-preview"><img src="https://sky.megestu.top/i/12024/20240217173025.png" style="width:90% !important;"></div><p>这样双击任何一个shader就可以跳转到vscode里进行查看与编辑代码</p><p> </p><hr><h3 id="_2-了解简单的shader代码结构" tabindex="-1"><a class="header-anchor" href="#_2-了解简单的shader代码结构"><span>2.了解简单的shader代码结构</span></a></h3><p>建一个最简的shader模板</p><div class="image-preview"><img src="https://sky.megestu.top/i/12024/20240217174007.png" style="width:90% !important;"></div><ul><li>改名设置shader路径</li><li>无开放参数</li><li>Light Count（光照计算）- Single Directional (单个方向光-太阳光）</li><li>几何体-Normal Quality - interpolated（归一化）</li></ul><p> </p><p>了解语句结构</p><div class="image-preview"><img src="https://sky.megestu.top/i/12024/20240217174110.png" style="width:90% !important;"></div><div class="image-preview"><img src="https://sky.megestu.top/i/12024/20240217213910.png" style="width:90% !important;"></div><p> </p><h3 id="逐句分析" tabindex="-1"><a class="header-anchor" href="#逐句分析"><span>逐句分析</span></a></h3><div class="image-preview"><img src="https://sky.megestu.top/i/12024/20240221002321.png" style="width:75% !important;"></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>// 定义顶点输入结构体，包含一个四维向量作为顶点位置信息
struct VertexInput {
    float4 vertex : POSITION;
};

// 定义顶点输出结构体，包含一个四维向量用于屏幕空间位置（SV_POSITION表示这是最终位置）
struct VertexOutput {
    float4 pos : SV_POSITION;
};

// 顶点着色器函数：将对象空间中的顶点坐标转换到屏幕空间，并返回VertexOutput类型数据
VertexOutput vert(VertexInput v) {
    // 创建一个VertexOutput类型变量o，并初始化为空值
    VertexOutput o = (VertexOutput)0;
    // 将输入的vertex通过UnityObjectToClipPos函数转换到屏幕空间，并赋值给o.pos 
    o.pos = UnityObjectToClipPos(v.vertex);
    return o; // 返回处理后的结果数据
}

// 片元着色器函数：确定每个像素显示什么颜色
float4 frag(VertexOutpu i) : COLOR {  
    float3 emissive = float3(1, 0.46, 0); // 设置发光属性RGB值
    float3 finalColor = emissive; // finalColor等于发光属性
     return float4(finalColor,1.0);　// 返回计算得到的finalColor（emissive），及alpha=1
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p> </p><p>根据下图创建一个shader的文件-并且复制一个基本shader结构，简单修改返回值，<br> 更改 <code>return float4</code> 的颜色信息。</p><div class="image-preview"><img src="https://sky.megestu.top/i/12024/20240217174322.png" style="width:90% !important;"></div><div class="image-preview"><img src="https://sky.megestu.top/i/12024/20240217230140.png" style="width:90% !important;"></div><p> </p><h3 id="_3-通过代码-实现-lambert-效果" tabindex="-1"><a class="header-anchor" href="#_3-通过代码-实现-lambert-效果"><span>3.通过代码-实现 lambert 效果</span></a></h3><div class="image-preview"><img src="https://sky.megestu.top/i/12024/20240217174345.png" style="width:90% !important;"></div><div class="image-preview"><img src="https://sky.megestu.top/i/12024/20240217235925.png" style="width:90% !important;"></div><p>与shaderforge代码对比-自己手敲的会减少一些无用的代码。</p><div class="image-preview"><img src="https://sky.megestu.top/i/12024/20240217174400.png" style="width:90% !important;"></div><p>这里讲到unity存光照位置的时候是个齐次坐标，0代表向量，1代表点<br> _WorldSpaceLightPos0.w为0，表示该光源为平行光。<br> _WorldSpaceLightPos0.w为1。则表示光源为点光源或聚光灯</p><p> </p><h2 id="节点组-开放参数" tabindex="-1"><a class="header-anchor" href="#节点组-开放参数"><span>节点组-开放参数</span></a></h2><p>常用的开放参数：</p><ul><li>texture - 贴图</li><li>vecotr - 向量</li><li>silider - 滑块</li><li>switch - 开关</li><li>color - 颜色</li></ul><div class="image-preview"><img src="https://sky.megestu.top/i/12024/20240217174426.png" style="width:90% !important;"></div><p> </p><h2 id="课后作业" tabindex="-1"><a class="header-anchor" href="#课后作业"><span>课后作业</span></a></h2><div class="image-preview"><img src="https://sky.megestu.top/i/12024/20240217174441.png" style="width:90% !important;"></div><p>作业：</p><p>ps：作业要求是只在暗部进行明暗的变化，尝试通过if去获取mask指控制暗部的范围然后再<br> 通过add叠加，或者blend叠加，看起来都不太理想，<br> 会全局进行明度变化，并不只是在暗部进行明暗的变化。</p><div class="image-preview"><img src="https://sky.megestu.top/i/12024/20240220232834.png" style="width:90% !important;"></div><div class="image-preview"><img src="https://sky.megestu.top/i/12024/20240220232931.png" style="width:90% !important;"></div>`,47);function p(o,c){return r(),t("div",null,[d,i(" more "),l])}const v=e(n,[["render",p],["__file","shader3.html.vue"]]),u=JSON.parse('{"path":"/engine/unity/shader/shader3.html","title":"unity-shader-03","lang":"zh-CN","frontmatter":{"title":"unity-shader-03","description":"摘要：回顾渲染流程，尝试vs写shader，以及一些开放参数的了解。","icon":"iconfont alicon-shader","category":"shader","tag":["shader","unity"],"date":"2024-02-21T00:00:00.000Z","cover":"https://sky.megestu.top/i/12024/20240220232610.png","head":[["meta",{"property":"og:url","content":"https:///about.md/blog/engine/unity/shader/shader3.html"}],["meta",{"property":"og:site_name","content":"Megestus"}],["meta",{"property":"og:title","content":"unity-shader-03"}],["meta",{"property":"og:description","content":"摘要：回顾渲染流程，尝试vs写shader，以及一些开放参数的了解。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://sky.megestu.top/i/12024/20240220232610.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-30T15:16:31.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://sky.megestu.top/i/12024/20240220232610.png"}],["meta",{"name":"twitter:image:alt","content":"unity-shader-03"}],["meta",{"property":"article:author","content":"Megestus"}],["meta",{"property":"article:tag","content":"shader"}],["meta",{"property":"article:tag","content":"unity"}],["meta",{"property":"article:published_time","content":"2024-02-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-30T15:16:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"unity-shader-03\\",\\"image\\":[\\"https://sky.megestu.top/i/12024/20240220232610.png\\"],\\"datePublished\\":\\"2024-02-21T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-30T15:16:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Megestus\\",\\"url\\":\\"https://github.com/Megestus\\"}]}"]]},"headers":[{"level":2,"title":"回顾渲染流程","slug":"回顾渲染流程","link":"#回顾渲染流程","children":[]},{"level":2,"title":"尝试shader代码","slug":"尝试shader代码","link":"#尝试shader代码","children":[{"level":3,"title":"1.untiy关联VScode","slug":"_1-untiy关联vscode","link":"#_1-untiy关联vscode","children":[]},{"level":3,"title":"2.了解简单的shader代码结构","slug":"_2-了解简单的shader代码结构","link":"#_2-了解简单的shader代码结构","children":[]},{"level":3,"title":"逐句分析","slug":"逐句分析","link":"#逐句分析","children":[]},{"level":3,"title":"3.通过代码-实现 lambert 效果","slug":"_3-通过代码-实现-lambert-效果","link":"#_3-通过代码-实现-lambert-效果","children":[]}]},{"level":2,"title":"节点组-开放参数","slug":"节点组-开放参数","link":"#节点组-开放参数","children":[]},{"level":2,"title":"课后作业","slug":"课后作业","link":"#课后作业","children":[]}],"git":{"createdTime":1711204216000,"updatedTime":1711811791000,"contributors":[{"name":"Megestus","email":"2624203622@qq.com","commits":1}]},"filePathRelative":"engine/unity/shader/shader3.md","localizedDate":"2024年2月21日","excerpt":"<p>摘要：回顾渲染流程，尝试vs写shader，以及一些开放参数的了解。</p>\\n","autoDesc":true}');export{v as comp,u as data};
